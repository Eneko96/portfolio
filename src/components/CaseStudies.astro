---
import { Card } from './Card/Card';
import { CustomChip } from './Work/Work';

export function tmpSort(list: IRepos[]) {
  return list.sort((a, b) => {
    if (a.name === 'UpRater') return -1;
    if (b.name === 'UpRater') return 1;
    if (a.name === 'portfolio') return -1;
    if (b.name === 'portfolio') return 1;
    if (a.name === 'icons-electron') return -1;
    if (b.name === 'icons-electron') return 1;
    if (a.name === 'weather-hackaton') return -1;
    if (b.name === 'weather-hackaton') return 1;
    return 0;
  });
}

export interface IRepos {
  clone_url: string;
  id: number;
  name: string;
  homepage: string;
  private_repo: boolean;
  description: string;
  created_at: string;
  languages_url: string;
  topics: string[];
}

const TEMP_NAMES = ['100_projects', 'BidsSocket', 'chat-app'];

// you could remove this as well and use the metadata from your readmes
const repos = await fetch(import.meta.env.GITHUB_URI, {
  headers: {
    Authorization: `Bearer ${import.meta.env.GITHUB_KEY}`,
  },
});
const res: IRepos[] = await repos.json();
const sorted = tmpSort([...res]) as IRepos[];
---

<div class="case-studies-container" id="casestudies">
  <h2 class="case-studies-title">Projects</h2>
  <div class="case-studies" style=`--studies: ${res.length}`>
    {
      res.length &&
        sorted.map(
          ({ clone_url: _, homepage, name, private_repo, description }) => (
            <Card client:visible class="case-studies-card">
              <div class="card-img-container">
                <img
                  class="card-img"
                  src={
                    TEMP_NAMES.includes(name)
                      ? `/${name}.png`
                      : 'https://picsum.photos/500?random=2.webp'
                  }
                  alt="project-image"
                  loading="lazy"
                />
              </div>
              <CustomChip class="custom-chip">
                {private_repo ? 'private' : 'public' + ' Repository'}
              </CustomChip>
              <div class="card-title">{name.replaceAll('-', ' ')}</div>
              <div class="card-description-container">
                <div class="subtitle card-sub">{homepage}</div>
                <div class="medium card-description-inner">
                  {description ?? 'There is no short description at the moment'}
                </div>
              </div>
              <button class="button card-button-details">
                <a
                  class="card-anchor"
                  style="color:inherit"
                  href={`/projects/${name}`}
                >
                  See Details
                </a>
              </button>
            </Card>
          ),
        )
    }
  </div>
  <div class="seemore">
    <div class="separator"></div>
    <a
      style={{ whiteSpace: 'nowrap' }}
      id="loadMoreButton"
      data-active="false"
      onclick="loadMore()"
    >
      See more related works
    </a>
    <div class="separator"></div>
  </div>
</div>
<style is:global>
  .custom-chip {
    width: fit-content;
  }
</style>
<style>
  .case-studies {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 32px;
    max-height: 450px;
    overflow-y: hidden;
    transition: max-height 0.5s ease-in-out;
  }

  .case-studies-card {
    animation: scaleit 0.2s;
    display: flex;
    flex-direction: column;
    transition: transform 0.2s;
  }

  .case-studies-card:hover {
    transform: scale(1.01);
    transition: transform 0.2s;
  }

  .case-studies-container {
    margin-bottom: 72px;
  }

  .case-studies-title {
    margin-bottom: 40px !important;
  }

  .card-img-container {
    margin: 0 -24px;
    margin-bottom: 20px;
    height: 200px;
  }

  .card-img {
    height: 200px;
    margin-bottom: 20px;
    border-radius: 8px 8px 0 0;
    width: 100%;
    object-fit: cover;
  }

  .card-title {
    margin-top: 24px !important;
    margin-bottom: 8px !important;
    font-weight: 400;
    font-size: 24px;
    line-height: 32px;
  }

  .card-description-container {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-bottom: 16px;
  }

  .card-description-inner {
    color: var(--neutral700);
  }

  .card-button-details {
    margin-top: auto;
    margin-left: auto;
    position: relative;
  }

  .subtitle.card-sub {
    word-break: break-all;
  }

  .card-anchor {
    position: absolute;
    padding-block: 10px;
    padding-inline: 20px;
  }

  @media (max-width: 768px) {
    .case-studies {
      grid-template-columns: none;
      grid-template-rows: auto;
      width: 335px;
      margin: auto;
    }
  }
  .seemore {
    margin-top: 72px;
    display: flex;
    flex-direction: row;
    gap: 72px;
    align-items: center;
  }

  @media (max-width: 768px) {
    .seemore > .separator {
      margin: auto;
    }
  }
  .is-open {
    max-height: calc(var(--studies, 1) * 444px);
    padding-bottom: 6px;
  }
</style>

<script is:inline>
const loadMore = () => {
  const caseStudies = document.querySelector('.case-studies');
  const lmButton = document.querySelector('#loadMoreButton');
  const active = lmButton.getAttribute('data-active');
  const isActive =
    active === 'true' ? true : active === 'false' ? false : undefined;

  lmButton.textContent = isActive
    ? 'See more related works'
    : 'See less related works';
  if (!isActive) {
    caseStudies?.classList.add('is-open');
  } else {
    caseStudies?.classList.remove('is-open');
  }
  lmButton.setAttribute('data-active', isActive ? 'false' : 'true');
};
</script>
