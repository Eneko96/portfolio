---
import Breadcrumb from '../../components/Breadcrumb/index.astro';
import BreadcrumbItem from '../../components/Breadcrumb/Item.astro';
import HeadLine from '../../components/HeadLine.astro';
import { CustomChip } from '../../components/Work/Work';
import { serializeClient } from '../../utils/client';
import { projectTypeParser } from '../../utils/projectType';
import { methodologyParser } from '../../utils/methodologies';
import Layout from '../../layouts/Layout.astro';
const colors = ['chip-success-1', 'chip-success-2', 'chip-success-3', 'chip-success-4']
// remember, customComponents in md are only available in mdx

const getColor = (percentage, arr) => {
   if (percentage === 0) return arr[0] 
   const zone = Math.floor((percentage / 100) * (colors.length - 1));
   console.log(percentage, zone, arr[Math.min(zone, arr.length - 1)])
   return arr[Math.min(zone, arr.length - 1)]
}

export async function getStaticPaths() {
    const readmes = await Astro.glob('../../content/projects/*.md');

    return readmes.map(readme => {
      console.log(readme.frontmatter.languages)
    return {
        params: {
          slug: readme.frontmatter.name
          },
          props: {
              readme,
              name: readme.frontmatter.name,
              description: readme.frontmatter.description,
              created_at: readme.frontmatter.created_at,
              title: readme.frontmatter.name,
              topics: [],
              languages: readme.frontmatter.languages ?? []
            }
      }
    })
};
  const { Content } = Astro.props.readme;
  const { name, created_at, topics, languages, title } = Astro.props;
---

<script>
  const BOX_SHADOW_CONSTRUCTOR = '4px 8px 16px rgba(28, 48, 75, 0.08)';

  const isScrolling = null;
  const layoutWidth = window.innerWidth < 768 ? 'mobile' : 'desktop';
  const studyRightRef = document.querySelector(
    '.study-right-side'
  )! as HTMLElement;

  const shadowHandler = ({
    isScrolling,
    layoutWidth,
    studyRightRef,
  }: {
    isScrolling: any;
    layoutWidth: string;
    studyRightRef: HTMLElement;
  }) => {
    window.clearTimeout(isScrolling);
    if (
      layoutWidth === 'desktop' &&
      studyRightRef &&
      Boolean(studyRightRef.style.boxShadow) === false
    ) {
      studyRightRef.style.boxShadow = BOX_SHADOW_CONSTRUCTOR;
    }
    isScrolling = setTimeout(() => {
      studyRightRef.style.boxShadow = '';
    }, 500);
  };
  document.addEventListener('scroll', () =>
    shadowHandler({ studyRightRef, isScrolling, layoutWidth })
  );
</script>

<Layout title={name}>
  <div role="main">
    <HeadLine title="Hello Welcome to my portfolio!" />
    <div class="study-header">
      <Breadcrumb>
        <BreadcrumbItem id="1" title="Case Studies" href="/" />
        <BreadcrumbItem id="2" title={name} href="#" />
      </Breadcrumb>
      <h1 class="study-header-content">{title}</h1>
    </div>
    <div class="study-page-container">
      <div class="study-inner">
        <main class="study-inner-container-layer">
          <div class="study-inner-container-content">
          <Content />
          </div>
        </main>
      </div>
      <div class="study-right-side">
        <div class="study-right-side-container">
          <div class="study-right-side-element">
            <small>Client</small>
            <p class="study-topic-element">
              {serializeClient(topics)}
            </p>
          </div>

          <div class="study-right-side-element">
            <small>Date</small>
            <p>
              {
                Intl.DateTimeFormat('default', {
                  month: 'short',
                  year: 'numeric',
                }).format(new Date(created_at))
              }
            </p>
          </div>

          <div class="study-right-side-element">
            <small>Type of Project</small>
            <p class="study-topic-element">
              {projectTypeParser(topics)}
            </p>
          </div>

          <div class="study-right-side-element">
            <small>Tech Stack</small>
            {
              languages.length ? (
                <div class="study-tech-stack">
                  {languages.map((lang: { lang: string, perc: number}, idx: number) => (
                    <CustomChip title={lang.perc} client:visible key={idx + lang.lang} className={getColor(lang.perc, colors)}>
                      {lang.lang}{' '}
                    </CustomChip>
                  ))}
                </div>
              ) : (
                <p>No languages provided</p>
              )
            }
          </div>

          <div class="study-right-side-element">
            <small>Methodology</small>
            <p class="study-topic-element">
              {methodologyParser(topics)}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .study-img-container {
    margin-top: 72px;
    position: relative;
  }

  .study-img-title {
    border-radius: 8px;
    object-fit: cover;
  }

  .study-img-container::after {
    content: attr(data-title);
    font-size: 20px;
    line-height: 32px;
    font-family: Roboto, sans-serif;
    color: white;
    width: 100%;
    height: 20px;
    position: absolute;
    bottom: 32px;
    left: 24px;
  }

  .study-header {
    background-color: var(--neutral100);
    min-height: 220px;
    padding-left: 102px;
    padding-top: 16px;
    padding-bottom: 28px;
  }

  h1.study-header-content {
    margin-top: 40px;
    max-width: 672px;
  }

  .study-inner-container-content {
    width: 100%;
  }

  .study-inner-loader {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
  }

  .study-tech-stack {
    display: flex;
    flex-wrap: wrap;
    margin-top: 8px;
    margin-bottom: 16px;
    gap: 8px;
  }

  .study-topic-element {
    text-transform: capitalize;
  }

  .study-page-container {
    margin: 39px auto 0px 102px;
    display: flex;
  }

  .study-inner {
    padding-top: 44px;
    padding-bottom: 100px;
    flex: 1 1 auto;
  }

  .study-right-side {
    transition: box-shadow 0.3s ease-in-out;
  }

  .study-right-side {
    flex: 0.1 0 528px;
    padding: 48px 92px;
    /* box-shadow: 4px 8px 16px rgba(28, 48, 75, 0.08); */
    margin-left: 32px;
  }

  .study-right-side-container {
    position: sticky;
    top: 128px;
  }

  .study-right-side-element {
    margin-bottom: 24px;
  }

  .study-right-side-element > small {
    text-transform: uppercase;
  }

  .study-right-side-element > p {
    margin-top: 8px;
  }
  .tag-ds p {
      font-size: 16px !important;
      line-height: 24px !important;
    }

  @media (max-width: 768px) {
    .study-header {
      padding: 32px 20px;
      margin-inline: -20px;
    }
    h1.study-header-content {
      margin-top: 10px;
    }

    .study-page-container {
      margin: 0;
      flex-direction: column-reverse;
    }

    .study-right-side {
      flex: none;
      padding: 0;
      box-shadow: none;
      margin-left: 0;
      margin-top: 32px;
    }

    .study-right-side-container {
      position: static;
      top: unset;
    }

    .study-right-side::after {
      content: '';
      display: block;
      height: 1px;
      background-color: var(--neutral200);
      margin-top: 32px;
      width: auto;
    }

    .study-inner {
      padding-top: 32px;
    }
  }
</style>
<style is:global>
    .study-inner-container-content p {
        font-size: 16px;
        line-height: 24px;
      }
    .study-inner-container-content li {
        font-size: 16px;
        line-height: 24px;
      }
    .study-inner-container-content li {
        font-size: 16px;
        line-height: 24px;
      }
</style>
