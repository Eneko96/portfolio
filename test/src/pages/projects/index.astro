---
import { marked } from 'marked';
import HeadLine from '../../components/HeadLine.astro';
import { CustomChip } from '../../components/Work/Work';
import Layout from '../../layouts/Layout.astro';
import { BreadcrumbItem, Breadcrumb} from '@adeccoux/tag-ds/breadcrumb';

interface IState {
  title: string;
  owner: string;
  repo: string;
  branch: string;
  l_u: string;
  ca: string;
  topics: string[];
}

const { searchParams } = Astro.url;
const state = Object.fromEntries(searchParams.entries()) as unknown as IState;

const getLanguages = async (languages_url: string) => {
  const res = await fetch(languages_url);
  const data = await res.json();
  return data;
};

const getReadme = async () => {
  const res = await fetch(
    `https://raw.githubusercontent.com/${state.owner}/${state.repo}/${state.branch}/README.md`
  );
  const data = await res.text();
  return data;
};

const { readme, languages } = await Promise.all([
  getReadme(),
  getLanguages(state.l_u),
]).then((data) => {
  let readme = data[0];
  let languages = data[1];
  return { readme, languages };
});

export const headerRenderer = (text: string, level: 2 | 1 | 3 | 4 | 5 | 6) => {
  const escapedText = text.toLowerCase().replace(/[^\w]+/g, '-');
  if (level === 2) {
    return `<div class="study-img-container" data-title=${text}>
        <img
          class="study-img-title"
          src="https://picsum.photos/650"
          alt=${text}
        />
      </div>`;
  } else return `<h${level} id="${escapedText}">${text}</h${level}>`;
};

marked.use({ renderer: { heading: headerRenderer } });

const VALID_PROJECT_TYPE = ['web', 'mobile', 'desktop', 'iot'];

export const projectTypeParser = (projectTypes: string[]): string => {
  const res = projectTypes.find((projectType) =>
    VALID_PROJECT_TYPE.includes(projectType.toLowerCase())
  );

  return res ?? 'web';
};

const VALID_CLIENTS = ['myself', 'hackathon'];

export const serializeClient = (clients: string[]): string => {
  const res = clients.find((client) =>
    VALID_CLIENTS.includes(client.toLowerCase())
  );

  return res ?? 'myself';
};

const VALID_METHODOLOGIES = [
  'agile',
  'scrum',
  'kanban',
  'waterfall',
  'lean',
  'domain-driven-development',
];

export const methodologyParser = (methodology: string[]): string => {
  const res = methodology.find((methodology) =>
    VALID_METHODOLOGIES.includes(methodology.toLowerCase())
  );
  if (res?.includes('-')) res.replaceAll('-', ' ');
  return res ?? 'agile';
};
---

<Layout title="Welcome to Projects">
  <div role="main">
    <HeadLine title="Hello Welcome to my portfolio!" />
    <div class="study-header">
      <Breadcrumb className="tag-ds" client:load>
        <BreadcrumbItem id="1" title="Case Studies" href="#" />
        <BreadcrumbItem id="3" title={state.title} href="#" />
      </Breadcrumb>
      <h1 class="study-header-content">{state.title}</h1>
    </div>
    <div class="study-page-container">
      <div class="study-inner">
        <main class="study-inner-container-layer">
          <div class="study-inner-container-content">
            {
              readme && (
                <div
                  set:html={marked(readme, {
                    breaks: true,
                    gfm: true,
                    headerIds: true,
                  })}
                />
              )
            }
          </div>
        </main>
      </div>
      <div class="study-right-side">
        <div class="study-right-side-container">
          <div class="study-right-side-element">
            <small>Client</small>
            <p class="study-topic-element">
              {serializeClient(state.topics || [])}
            </p>
          </div>

          <div class="study-right-side-element">
            <small>Date</small>
            <p>
              {
                Intl.DateTimeFormat('default', {
                  month: 'short',
                  year: 'numeric',
                }).format(new Date(state.ca))
              }
            </p>
          </div>

          <div class="study-right-side-element">
            <small>Type of Project</small>
            <p class="study-topic-element">
              {projectTypeParser(state.topics || [])}
            </p>
          </div>

          <div class="study-right-side-element">
            <small>Tech Stack</small>
            {
              languages ? (
                <div class="study-tech-stack">
                  {Object.keys(languages).map((lang, idx) => (
                    <CustomChip key={idx + lang}>{lang} </CustomChip>
                  ))}
                </div>
              ) : (
                <p>No languages provided</p>
              )
            }
          </div>

          <div class="study-right-side-element">
            <small>Methodology</small>
            <p class="study-topic-element">
              {methodologyParser(state.topics || [])}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .study-img-container {
    margin-top: 72px;
    position: relative;
  }

  .study-img-title {
    border-radius: 8px;
    object-fit: cover;
  }

  .study-img-container::after {
    content: attr(data-title);
    font-size: 20px;
    line-height: 32px;
    font-family: Roboto, sans-serif;
    color: white;
    width: 100%;
    height: 20px;
    position: absolute;
    bottom: 32px;
    left: 24px;
  }

  .study-header {
    background-color: var(--neutral100);
    min-height: 220px;
    padding-left: 102px;
    padding-top: 16px;
    padding-bottom: 28px;
  }

  h1.study-header-content {
    margin-top: 40px;
    max-width: 672px;
  }

  .study-inner-container-content {
    width: 100%;
  }

  .study-inner-loader {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
  }

  .study-tech-stack {
    display: flex;
    flex-wrap: wrap;
    margin-top: 8px;
    margin-bottom: 16px;
    gap: 8px;
  }

  .study-topic-element {
    text-transform: capitalize;
  }

  .study-page-container {
    margin: 39px auto 0px 102px;
    display: flex;
  }

  .study-inner {
    padding-top: 44px;
    padding-bottom: 100px;
    flex: 1 1 auto;
  }

  .study-right-side {
    transition: box-shadow 0.3s ease-in-out;
  }

  @media (max-width: 768px) {
    .study-header {
      padding: 32px 20px;
      margin-inline: -20px;
    }
    h1.study-header-content {
      margin-top: 10px;
    }

    .study-page-container {
      margin: 0;
      flex-direction: column-reverse;
    }

    .study-right-side {
      flex: none;
      padding: 0;
      box-shadow: none;
      margin-left: 0;
      margin-top: 32px;
    }

    .study-right-side-container {
      position: static;
      top: unset;
    }

    .study-right-side::after {
      content: '';
      display: block;
      height: 1px;
      background-color: var(--neutral200);
      margin-top: 32px;
      width: auto;
    }

    .study-inner {
      padding-top: 32px;
    }
  }
</style>
