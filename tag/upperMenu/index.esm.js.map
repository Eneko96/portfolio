{"version":3,"file":"index.esm.js","sources":["../../src/components/dropdown/dropdownButton.tsx","../../src/components/dropdown/dropdownMenu.tsx","../../src/components/dropdown/dropdown.tsx","../../src/components/notification/notificationHeader.tsx","../../src/components/notification/notificationBody.tsx","../../src/components/notification/notificationFooter.tsx","../../src/components/notification/notification.tsx","../../src/components/overflowMenu/overflowMenu.tsx","../../src/components/upperMenu/upperMenu.tsx"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {useDropdown} from './dropdown';\nexport interface DropdownButtonProps {\n  className?: string;\n  disabled?: boolean;\n  children: React.ReactNode;\n\n  [others: string]: any;\n}\n\nconst DropdownButton: React.FC<DropdownButtonProps> = ({children, className, disabled, ...rest}) => {\n  const {onToggleMenu, setDropdownButtonDimensions, showMenu} = useDropdown();\n  const dropdownButtonRef = React.useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (dropdownButtonRef && dropdownButtonRef.current) {\n      const positionButton = dropdownButtonRef.current.getBoundingClientRect();\n      if (positionButton) setDropdownButtonDimensions({width: positionButton.width, height: positionButton.height});\n    }\n  }, [showMenu]);\n  return (\n    <div\n      className={`dropdown-button${disabled ? '_disabled' : ''} ${className || ''}`}\n      onClick={onToggleMenu}\n      ref={dropdownButtonRef}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default React.memo(DropdownButton);\n","import React, {useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useDropdown} from './dropdown';\n\nexport interface DropdownMenuProps {\n  className?: string;\n  [others: string]: any;\n}\n\nconst DropdownMenu: React.FC<DropdownMenuProps> = ({className, children, ...rest}) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const {showMenu, setDropdownMenuDimensions, position, dropdownRef, handleClickMenu} = useDropdown();\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      const positionMenu = ref.current.getBoundingClientRect();\n      if (positionMenu)\n        setDropdownMenuDimensions({\n          width: positionMenu.width,\n          height: positionMenu.height,\n        });\n    }\n  }, [showMenu]);\n\n  const content = (\n    <div\n      ref={ref}\n      className={`dropdown-menu ${showMenu ? '' : 'hidden'} ${className || ''}`}\n      style={position}\n      onClick={handleClickMenu}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n  if (dropdownRef && dropdownRef.current) {\n    const root = document.getElementById('root');\n    return ReactDOM.createPortal(content, dropdownRef.current || root || document.body);\n  }\n  return null;\n};\n\nexport default DropdownMenu;\n","import React, {useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport {default as DropdownButton} from './dropdownButton';\nexport {default as DropdownMenu} from './dropdownMenu';\nconst DropdownContext = React.createContext({});\ntype DropdownPosition = 'top' | 'bottom' | 'right' | 'left';\ninterface DropdownProps {\n  className?: string;\n  onChangeToggleMenu?: (state: boolean) => void;\n  itemsDivider?: boolean;\n  forceRefresh?: number;\n  defaultShow?: boolean;\n  keepShown?: boolean;\n  placement?: DropdownPosition;\n  [others: string]: any;\n}\n\ninterface IDropdownContext {\n  showMenu: boolean;\n  setDropdownMenuDimensions: (dimensions: {width: number; height: number}) => void;\n  setDropdownButtonDimensions: (dimensions: {width: number; height: number}) => void;\n  handleClickMenu: (e: React.MouseEvent<HTMLDivElement>) => void;\n  position: {left: string; top: string};\n  itemsDivider: boolean;\n  dropdownRef: React.RefObject<HTMLDivElement>;\n  onToggleMenu: () => void;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({\n  children,\n  className,\n  onChangeToggleMenu,\n  itemsDivider,\n  forceRefresh,\n  defaultShow,\n  keepShown = false,\n  placement = 'bottom',\n  ...rest\n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [refresh, setRefresh] = useState(forceRefresh ? forceRefresh : 0);\n  const [dropdownMenuDim, setDropdownMenuDim] = useState({width: 0, height: 0});\n  const [dropdownButtonDim, setDropdownButtonDim] = useState({width: 0, height: 0});\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (defaultShow !== undefined && defaultShow !== showMenu) {\n      setShowMenu(defaultShow as boolean);\n    }\n  }, [defaultShow]);\n\n  useEffect(() => {\n    if (forceRefresh && refresh !== forceRefresh) setRefresh(forceRefresh);\n  }, [forceRefresh, refresh]);\n\n  const onToggleMenu = () => {\n    setShowMenu((prev) => {\n      if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(!prev);\n      return !prev;\n    });\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (event && event.target) {\n      if (\n        dropdownRef &&\n        dropdownRef.current &&\n        dropdownRef.current.getAttribute('data-show') === 'true' &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setShowMenu(false);\n        if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('scroll', () => setRefresh((prev) => prev++));\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n      document.removeEventListener('scroll', () => setRefresh((prev) => prev++));\n    };\n  }, []);\n\n  const topStr = (top: number, menuHeight: number) => `calc(${top}px - ${menuHeight}px - var(--unit))`;\n  const bottomStr = (top: number, buttonHeight: number) => `calc(${top}px + ${buttonHeight}px + var(--unit))`;\n  const rightStr = (left: number, buttonWidth: number) => `calc(${left}px + ${buttonWidth}px + var(--unit))`;\n  const leftStr = (left: number, menuWidth: number) => `calc(${left}px - ${menuWidth}px - var(--unit))`;\n  const leftAlignment = (left: number) => `${left}px`;\n  const rightAlignment = (left: number, menuWidth: number, buttonWidth: number) =>\n    `calc(${left}px + ${buttonWidth}px - ${menuWidth}px)`;\n  const topAlignment = (top: number) => `${top}px`;\n  const bottomAlignment = (top: number, menuHeight: number, buttonHeight: number) =>\n    `calc(${top}px + ${buttonHeight}px - ${menuHeight}px)`;\n\n  const position = useMemo(() => {\n    let left,\n      top = '',\n      dropdownMenuWidth = 0;\n\n    if (dropdownRef && dropdownRef.current) {\n      const position = dropdownRef.current.getBoundingClientRect();\n      dropdownMenuWidth = dropdownMenuDim.width < dropdownButtonDim.width ? dropdownButtonDim.width : dropdownMenuDim.width;\n      const {clientHeight, clientWidth} = document.body;\n      switch (placement) {\n        case 'top':\n          if (position.top - dropdownMenuDim.height - 8 < 0) {\n            top = bottomStr(position.top, dropdownButtonDim.height);\n          } else {\n            top = topStr(position.top, dropdownMenuDim.height);\n          }\n          if (position.left + dropdownMenuWidth > clientWidth) {\n            left = rightAlignment(position.left, dropdownMenuWidth, dropdownButtonDim.width);\n          } else {\n            left = leftAlignment(position.left);\n          }\n          break;\n        case 'right':\n          if (position.left + dropdownMenuWidth + 8 > clientWidth) {\n            left = leftStr(position.left, dropdownMenuWidth);\n          } else {\n            left = rightStr(position.left, dropdownButtonDim.width);\n          }\n          if (position.top + dropdownMenuDim.height > clientHeight) {\n            top = bottomAlignment(position.top, dropdownMenuDim.height, dropdownButtonDim.height);\n          } else {\n            top = topAlignment(position.top);\n          }\n          break;\n        case 'bottom':\n          if (position.top + dropdownMenuDim.height + 8 > clientHeight) {\n            top = topStr(position.top, dropdownMenuDim.height);\n          } else {\n            top = bottomStr(position.top, dropdownButtonDim.height);\n          }\n          if (position.left + dropdownMenuWidth > clientWidth) {\n            left = rightAlignment(position.left, dropdownMenuWidth, dropdownButtonDim.width);\n          } else {\n            left = leftAlignment(position.left);\n          }\n          break;\n        case 'left':\n          if (position.left - dropdownMenuWidth - 8 < 0) {\n            left = rightStr(position.left, dropdownButtonDim.width);\n          } else {\n            left = leftStr(position.left, dropdownMenuWidth);\n          }\n          if (position.top + dropdownMenuDim.height > clientHeight) {\n            top = bottomAlignment(position.top, dropdownMenuDim.height, dropdownButtonDim.height);\n          } else {\n            top = topAlignment(position.top);\n          }\n          break;\n      }\n    }\n    return {left, top, width: `${dropdownMenuWidth}px`};\n  }, [dropdownMenuDim, dropdownButtonDim]);\n\n  const handleClickMenu = () => {\n    if (!keepShown) {\n      setShowMenu(false);\n      if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(false);\n    }\n  };\n\n  return (\n    <DropdownContext.Provider\n      value={{\n        showMenu,\n        setDropdownMenuDimensions: setDropdownMenuDim,\n        setDropdownButtonDimensions: setDropdownButtonDim,\n        handleClickMenu,\n        itemsDivider,\n        dropdownRef,\n        onChangeToggleMenu,\n        onToggleMenu,\n        position,\n      }}\n    >\n      <div ref={dropdownRef} className={`dropdown ${className || ''}`} data-show={showMenu} {...rest}>\n        {children}\n      </div>\n    </DropdownContext.Provider>\n  );\n};\n\nexport default Dropdown;\n/**\n *\n * @internal\n */\nexport const useDropdown = () => useContext(DropdownContext) as IDropdownContext;\n","import React from 'react';\n\ninterface INotificationHeader {\n  className?: string;\n  [others: string]: any;\n}\n\nconst NotificationHeader: React.FC<INotificationHeader> = (props) => {\n  const {className, children, ...rest} = props;\n\n  return (\n    <div className={`notification-header ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default NotificationHeader;\n","import React from 'react';\n\ninterface INotificationBody {\n  className?: string;\n  [others: string]: any;\n}\n\nconst NotificationBody: React.FC<INotificationBody> = (props) => {\n  const {className, children, ...rest} = props;\n\n  return (\n    <div className={`notification-body ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default NotificationBody;\n","import React from 'react';\n\ninterface INotificationFooter {\n  className?: string;\n  [others: string]: any;\n}\n\nconst NotificationFooter: React.FC<INotificationFooter> = (props) => {\n  const {className, children, ...rest} = props;\n\n  return (\n    <div className={`notification-footer ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default NotificationFooter;\n","import React, {useEffect, useRef} from 'react';\nimport ReactDOM from 'react-dom';\n\nexport {default as NotificationHeader} from './notificationHeader';\nexport {default as NotificationBody} from './notificationBody';\nexport {default as NotificationFooter} from './notificationFooter';\n\ninterface INotification {\n  /**\n   * Tell whether you want the close icon or not\n   */\n  icon?: any;\n  /**\n   * Additional styling if needed\n   */\n  className?: string;\n  /**\n   * Change status to Success\n   */\n  success?: boolean;\n  /**\n   * Change status to Error\n   */\n  error?: boolean;\n  /**\n   * Change status to Info\n   */\n  info?: boolean;\n  /**\n   * Change status to Warning\n   */\n  warning?: boolean;\n  /**\n   * Change status to Read\n   */\n  read?: boolean;\n  /**\n   * State for showing the notification\n   */\n  show: boolean;\n  setShow?: (show: boolean) => void;\n  /**\n   * handler function for the close button\n   */\n  onClose?: () => void;\n  /**\n   * Handler to show or not as a portal\n   */\n  renderAsPortal?: boolean;\n  [others: string]: any;\n}\n\nconst Notification: React.FC<INotification> = (props) => {\n  const {className, renderAsPortal, icon, children, onClose, success, error, warning, info, read, show, setShow, ...rest} =\n    props;\n\n  const iconTestId = rest && rest['data-testid'] ? rest['data-testid'] + '-close-test' : undefined;\n  const closeTimer: any = useRef(null);\n  const state = () => {\n    if (success) return 'success';\n    if (error) return 'error';\n    if (info) return 'info';\n    if (warning) return 'warning';\n    if (read) return 'read';\n    return 'read';\n  };\n\n  useEffect(() => {\n    if (show && renderAsPortal && !onClose) {\n      clearTimeout(closeTimer.current);\n      closeTimer.current = setTimeout(() => {\n        if (typeof setShow === 'function') setShow(false);\n      }, 5000);\n    }\n\n    return () => {\n      clearTimeout(closeTimer.current);\n    };\n  }, [show]);\n\n  const IconClose = () => (\n    <button type=\"button\" className=\"notification-close-button\" onClick={onClose} data-testid={iconTestId || undefined}>\n      <span className=\"material-icons\">close</span>\n    </button>\n  );\n  const content = show ? (\n    <div className={`${renderAsPortal ? 'tag-ds' : ''} notification_${state()} ${className || ''}`} {...rest}>\n      {typeof onClose === 'function' && <IconClose />}\n      {icon ? (\n        <>\n          <div className=\"notification-icon\">{icon}</div>\n          <div className=\"notification-content\">{children}</div>\n        </>\n      ) : (\n        children\n      )}\n    </div>\n  ) : null;\n\n  const container = document.getElementById('root') || document.body;\n  if (renderAsPortal) return ReactDOM.createPortal(content, container as Element);\n  return content;\n};\n\nexport default Notification;\n","import React, {useEffect, useRef} from 'react';\n\nexport interface IOverflowMenuProps {\n  show: boolean;\n  /**\n   * Title of the Overflow Menu\n   */\n  title: string;\n  /**\n   * Name of the action if needed\n   */\n  action?: string;\n  /**\n   * Displays close button and handles the event\n   */\n  onClose: () => void;\n  showCloseButton?: boolean;\n  /**\n   * Handler for the action Button\n   */\n  onAction?: () => void;\n  className?: string;\n  parentRef?: any;\n  [other: string]: any;\n}\n\nconst OverflowMenu: React.FC<IOverflowMenuProps> = ({\n  show,\n  children,\n  title,\n  action,\n  onClose,\n  showCloseButton,\n  onAction,\n  className,\n  parentRef,\n  ...rest\n}) => {\n  const overflowRef = useRef<HTMLDivElement>(null);\n  const handleCloseOutsideOverflow = (event: MouseEvent) => {\n    if (event && event.target) {\n      if (\n        ((overflowRef && overflowRef.current && !overflowRef.current.contains(event.target as Node) && !parentRef) ||\n          (overflowRef &&\n            overflowRef.current &&\n            !overflowRef.current.contains(event.target as Node) &&\n            parentRef &&\n            parentRef.current &&\n            !parentRef.current.contains(event.target as Node))) &&\n        show\n      ) {\n        onClose();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!showCloseButton && !(rest && rest['data-handlecloseclick'])) {\n      document.addEventListener('mousemove', handleCloseOutsideOverflow);\n    } else {\n      document.addEventListener('click', handleCloseOutsideOverflow);\n    }\n    return () => {\n      document.removeEventListener('mousemove', handleCloseOutsideOverflow);\n      document.removeEventListener('click', handleCloseOutsideOverflow);\n    };\n  });\n  return show ? (\n    <div\n      ref={overflowRef}\n      className={`overflow-menu ${className || ''}`}\n      data-testid={rest['data-testid'] ? rest['data-testid'] : undefined}\n      {...rest}\n    >\n      <div className=\"overflow-menu-header\">\n        {title && <div className=\"small-title mr3\">{title}</div>}\n        {action && (\n          <div\n            className=\"overflow-menu-action link_small\"\n            onClick={onAction}\n            data-testid={rest['data-testid'] ? rest['data-testid'] + '-action-button' : undefined}\n          >\n            {action}\n          </div>\n        )}\n\n        {showCloseButton && (\n          <button\n            type=\"button\"\n            className=\"overflow-menu-close\"\n            onClick={onClose}\n            data-testid={rest['data-testid'] ? rest['data-testid'] + '-close-button' : undefined}\n          >\n            <span className=\"material-icons\">close</span>\n          </button>\n        )}\n      </div>\n      <div className=\"overflow-menu-body\">{children}</div>\n    </div>\n  ) : null;\n};\n\nexport default OverflowMenu;\n","import React, {useRef} from 'react';\nimport Dropdown, {DropdownButton, DropdownMenu} from '../dropdown/dropdown';\nimport Notification, {NotificationBody, NotificationFooter, NotificationHeader} from '../notification/notification';\nimport OverflowMenu from '../overflowMenu/overflowMenu';\ntype NotificationType = 'error' | 'info' | 'read' | 'warning';\n\nexport interface INotification {\n  header: string;\n  body: string;\n  footer?: React.ReactElement;\n  type: NotificationType;\n  show?: boolean;\n  created?: Date;\n  icon?: any;\n}\n\ninterface IUpperMenu {\n  /**\n   * For setting the Avatar info\n   */\n  avatar: {\n    img: string | any;\n    title: string;\n    subtitle?: string;\n  };\n  /**\n   * Title of the Upper Menu\n   */\n  title?: string;\n  /**\n   * Notification List containing header, body, footer, type, show and created and actions in\n   * the overflow menu of notifications\n   */\n  notifications?: {\n    setShowItems: () => void;\n    onAction?: () => void;\n    action?: string;\n    emptyMessage?: any;\n    title: string;\n    items: INotification[];\n    showItems: boolean;\n    showCloseButton?: boolean;\n  };\n  /**\n   * Options of the Upper Menu\n   */\n  options?: {name: string; onClick: () => void}[];\n  className?: string;\n  [others: string]: any;\n}\n\nconst UpperMenu: React.FC<IUpperMenu> = (props: IUpperMenu) => {\n  const {avatar, title, notifications, options, className, ...rest} = props;\n  const notifButtonRef = useRef<HTMLButtonElement>(null);\n\n  const notificationType = (type: NotificationType) => {\n    if (type === 'error') return {error: true};\n    if (type === 'info') return {info: true};\n    if (type === 'read') return {read: true};\n    if (type === 'warning') return {warning: true};\n    return {info: true};\n  };\n\n  const renderNotification = (_notification: INotification, idx: number) => {\n    return (\n      <Notification\n        {...notificationType(_notification.type)}\n        className=\"upper-menu-overflow-notification\"\n        show={_notification.show ?? true}\n        key={`upper-menu-notification-${idx}`}\n        icon={_notification.icon}\n      >\n        {_notification.header && (\n          <NotificationHeader>\n            {_notification.header}\n            {_notification.created && (\n              <span className=\"notification-center-text\">{_notification.created.getSeconds()}s</span>\n            )}\n          </NotificationHeader>\n        )}\n        {_notification.body && <NotificationBody>{_notification.body}</NotificationBody>}\n        {_notification.footer && <NotificationFooter>{_notification.footer}</NotificationFooter>}\n      </Notification>\n    );\n  };\n\n  return (\n    <div\n      className={`upper-menu ${className || ''}`}\n      data-testid={rest && rest['data-testid'] ? rest['data-testid'] : undefined}\n    >\n      {title && (\n        <div\n          className=\"upper-menu_left\"\n          data-testid={rest && rest['data-testid'] ? rest['data-testid'] + '-title' : undefined}\n        >\n          {title}\n        </div>\n      )}\n      <div className=\"upper-menu_right\">\n        {notifications && (\n          <div className=\"upper-menu-notifications\">\n            <button\n              type=\"button\"\n              ref={notifButtonRef}\n              className=\"upper-menu-icon\"\n              onClick={notifications.setShowItems}\n              data-testid={rest && rest['data-testid'] ? rest['data-testid'] + '-notif-icon' : undefined}\n            >\n              {notifications.items.length > 0 && <div className=\"badge_small\">{notifications.items.length}</div>}\n              <span className=\"material-icons\">notifications</span>\n            </button>\n            <OverflowMenu\n              show={notifications.showItems}\n              className=\"upper-menu-overflow notification-center\"\n              title={notifications.title}\n              onClose={notifications.setShowItems}\n              action={notifications.action}\n              onAction={notifications.onAction}\n              parentRef={notifButtonRef}\n            >\n              {notifications.items.length > 0\n                ? notifications.items.map((_not: INotification, idx) => renderNotification(_not, idx))\n                : notifications.emptyMessage}\n            </OverflowMenu>\n          </div>\n        )}\n        <div className=\"avatar-wrapper\">\n          {typeof avatar.img === 'string' ? (\n            <img src={avatar.img} alt=\"avatar icon\" className=\"avatar_xsmall\" />\n          ) : (\n            avatar.img\n          )}\n          <div className=\"avatar-text-wrapper\">\n            <span className=\"avatar-title\">{avatar.title}</span>\n            {avatar.subtitle && <span className=\"avatar-subtitle\">{avatar.subtitle}</span>}\n          </div>\n        </div>\n\n        {options && options.length > 0 && (\n          <Dropdown className=\"upper-menu-dropdown\">\n            <DropdownButton>\n              <button\n                type=\"button\"\n                className=\"upper-menu-info\"\n                data-testid={rest && rest['data-testid'] ? rest['data-testid'] + '-more-info' : undefined}\n              >\n                <span className=\"material-icons\">more_vert</span>\n              </button>\n            </DropdownButton>\n            <DropdownMenu>\n              {options.map(({name, onClick}, idx) => (\n                <li className=\"dropdown-item\" onClick={onClick} key={idx + '-upper-menu-dropdown'}>\n                  {name}\n                </li>\n              ))}\n            </DropdownMenu>\n          </Dropdown>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default UpperMenu;\n"],"names":["DropdownButton$1","React","memo","_a","children","className","disabled","rest","__rest","_b","useDropdown","onToggleMenu","setDropdownButtonDimensions","showMenu","dropdownButtonRef","useRef","useEffect","current","positionButton","getBoundingClientRect","width","height","_jsx","__assign","concat","onClick","ref","DropdownMenu","setDropdownMenuDimensions","position","dropdownRef","handleClickMenu","positionMenu","content","style","root","document","getElementById","ReactDOM","createPortal","body","DropdownContext","createContext","Dropdown","onChangeToggleMenu","itemsDivider","forceRefresh","defaultShow","keepShown","_c","placement","_d","__read","useState","setShowMenu","_e","refresh","setRefresh","_f","dropdownMenuDim","setDropdownMenuDim","_g","dropdownButtonDim","setDropdownButtonDim","undefined","handleClickOutside","event","target","getAttribute","contains","addEventListener","prev","removeEventListener","topStr","top","menuHeight","bottomStr","buttonHeight","rightStr","left","buttonWidth","leftStr","menuWidth","leftAlignment","rightAlignment","topAlignment","bottomAlignment","useMemo","dropdownMenuWidth","position_1","clientHeight","clientWidth","Provider","value","useContext","NotificationHeader","props","NotificationBody","NotificationFooter","Notification","renderAsPortal","icon","onClose","success","error","warning","info","show","read","setShow","iconTestId","closeTimer","clearTimeout","setTimeout","_jsxs","type","_Fragment","container","OverflowMenu","title","action","showCloseButton","onAction","parentRef","overflowRef","handleCloseOutsideOverflow","UpperMenu","avatar","notifications","options","notifButtonRef","setShowItems","items","length","showItems","map","_not","idx","_notification","_createElement","key","header","created","getSeconds","footer","renderNotification","emptyMessage","img","src","alt","subtitle","DropdownButton","name"],"mappings":"ggCAUA,IAqBAA,EAAeC,EAAMC,MArBiC,SAACC,GAAC,IAAAC,EAAQD,EAAAC,SAAEC,EAASF,EAAAE,UAAEC,EAAQH,EAAAG,SAAKC,EAAnCC,EAAAL,EAAA,CAAA,WAAA,YAAA,aAC/CM,EAAwDC,IAAvDC,EAAYF,EAAAE,aAAEC,EAA2BH,EAAAG,4BAAEC,EAAQJ,EAAAI,SACpDC,EAAoBb,EAAMc,OAAuB,MAOvD,OANAC,GAAU,WACR,GAAIF,GAAqBA,EAAkBG,QAAS,CAClD,IAAMC,EAAiBJ,EAAkBG,QAAQE,wBAC7CD,GAAgBN,EAA4B,CAACQ,MAAOF,EAAeE,MAAOC,OAAQH,EAAeG,QACtG,CACH,GAAG,CAACR,IAEFS,EAAA,MAAAC,EAAA,CACElB,UAAW,yBAAkBC,EAAW,YAAc,GAAM,KAAAkB,OAAAnB,GAAa,IACzEoB,QAASd,EACTe,IAAKZ,GACDP,EAAI,CAAAH,SAEPA,IAGP,ICpBMuB,EAA4C,SAACxB,GAAC,IAAAE,cAAWD,aAAaG,EAAzBC,EAAAL,EAAA,CAAA,YAAA,aAC3CuB,EAAMzB,EAAMc,OAAuB,MACnCN,EAAgFC,IAA/EG,EAAQJ,EAAAI,SAAEe,EAAyBnB,EAAAmB,0BAAEC,aAAUC,gBAAaC,oBAEnEf,GAAU,WACR,GAAIU,GAAOA,EAAIT,QAAS,CACtB,IAAMe,EAAeN,EAAIT,QAAQE,wBAC7Ba,GACFJ,EAA0B,CACxBR,MAAOY,EAAaZ,MACpBC,OAAQW,EAAaX,QAE1B,CACH,GAAG,CAACR,IAEJ,IAAMoB,EACJX,EACE,MAAAC,EAAA,CAAAG,IAAKA,EACLrB,UAAW,wBAAiBQ,EAAW,GAAK,SAAQ,KAAAW,OAAInB,GAAa,IACrE6B,MAAOL,EACPJ,QAASM,GACLxB,YAEHH,KAGL,GAAI0B,GAAeA,EAAYb,QAAS,CACtC,IAAMkB,EAAOC,SAASC,eAAe,QACrC,OAAOC,EAASC,aAAaN,EAASH,EAAYb,SAAWkB,GAAQC,SAASI,KAC/E,CACD,OAAO,IACT,ECpCMC,EAAkBxC,EAAMyC,cAAc,CAAA,GAwBtCC,EAAoC,SAACxC,GACzC,IAAAC,EAAQD,EAAAC,SACRC,cACAuC,EAAkBzC,EAAAyC,mBAClBC,EAAY1C,EAAA0C,aACZC,EAAY3C,EAAA2C,aACZC,EAAW5C,EAAA4C,YACXtC,EAAAN,EAAA6C,UAAAA,OAAS,IAAAvC,GAAQA,EACjBwC,EAAoB9C,EAAA+C,UAApBA,OAAS,IAAAD,EAAG,SAAQA,EACjB1C,EAAIC,EAAAL,EATkC,mHAWnCgD,EAAAC,EAA0BC,GAAS,GAAM,GAAxCxC,EAAQsC,EAAA,GAAEG,OACXC,EAAAH,EAAwBC,EAASP,GAA8B,GAAE,GAAhEU,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,EAAAN,EAAwCC,EAAS,CAACjC,MAAO,EAAGC,OAAQ,IAAG,GAAtEsC,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACpCG,EAAAT,EAA4CC,EAAS,CAACjC,MAAO,EAAGC,OAAQ,IAAG,GAA1EyC,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAExC/B,EAAcf,EAAuB,MAC3CC,GAAU,gBACYgD,IAAhBjB,GAA6BA,IAAgBlC,GAC/CyC,EAAYP,EAEhB,GAAG,CAACA,IAEJ/B,GAAU,WACJ8B,GAAgBU,IAAYV,GAAcW,EAAWX,EAC3D,GAAG,CAACA,EAAcU,IAElB,IAOMS,EAAqB,SAACC,GACtBA,GAASA,EAAMC,QAEfrC,GACAA,EAAYb,SACsC,SAAlDa,EAAYb,QAAQmD,aAAa,eAChCtC,EAAYb,QAAQoD,SAASH,EAAMC,UAEpCb,GAAY,GACsB,mBAAvBV,GAAmCA,GAAmB,GAGvE,EAEA5B,GAAU,WAGR,OAFAoB,SAASkC,iBAAiB,QAASL,GACnC7B,SAASkC,iBAAiB,UAAU,WAAM,OAAAb,GAAW,SAACc,GAAS,OAAAA,MAAO,IAC/D,WACLnC,SAASoC,oBAAoB,QAASP,GACtC7B,SAASoC,oBAAoB,UAAU,WAAM,OAAAf,GAAW,SAACc,GAAS,OAAAA,MAAO,GAC3E,CACD,GAAE,IAEH,IAAME,EAAS,SAACC,EAAaC,GAAuB,MAAA,QAAAnD,OAAQkD,EAAW,SAAAlD,OAAAmD,EAA6B,oBAAA,EAC9FC,EAAY,SAACF,EAAaG,GAAyB,MAAA,QAAArD,OAAQkD,EAAW,SAAAlD,OAAAqD,EAA+B,oBAAA,EACrGC,EAAW,SAACC,EAAcC,GAAwB,MAAA,QAAAxD,OAAQuD,EAAY,SAAAvD,OAAAwD,EAA8B,oBAAA,EACpGC,EAAU,SAACF,EAAcG,GAAsB,MAAA,QAAA1D,OAAQuD,EAAY,SAAAvD,OAAA0D,EAA4B,oBAAA,EAC/FC,EAAgB,SAACJ,GAAiB,MAAA,GAAAvD,OAAGuD,EAAI,OACzCK,EAAiB,SAACL,EAAcG,EAAmBF,GACvD,MAAA,eAAQD,EAAI,SAAAvD,OAAQwD,EAAW,SAAAxD,OAAQ0D,EAAc,MAArD,EACIG,EAAe,SAACX,GAAgB,MAAA,GAAAlD,OAAGkD,EAAG,OACtCY,EAAkB,SAACZ,EAAaC,EAAoBE,GACxD,MAAA,eAAQH,EAAG,SAAAlD,OAAQqD,EAAY,SAAArD,OAAQmD,EAAe,MAAtD,EAEI9C,EAAW0D,GAAQ,WACvB,IAAIR,EACFL,EAAM,GACNc,EAAoB,EAEtB,GAAI1D,GAAeA,EAAYb,QAAS,CACtC,IAAMwE,EAAW3D,EAAYb,QAAQE,wBACrCqE,EAAoB7B,EAAgBvC,MAAQ0C,EAAkB1C,MAAQ0C,EAAkB1C,MAAQuC,EAAgBvC,MAC1G,IAAAjB,EAA8BiC,SAASI,KAAtCkD,EAAYvF,EAAAuF,aAAEC,EAAWxF,EAAAwF,YAChC,OAAQzC,GACN,IAAK,MAEDwB,EADEe,EAASf,IAAMf,EAAgBtC,OAAS,EAAI,EACxCuD,EAAUa,EAASf,IAAKZ,EAAkBzC,QAE1CoD,EAAOgB,EAASf,IAAKf,EAAgBtC,QAG3C0D,EADEU,EAASV,KAAOS,EAAoBG,EAC/BP,EAAeK,EAASV,KAAMS,EAAmB1B,EAAkB1C,OAEnE+D,EAAcM,EAASV,MAEhC,MACF,IAAK,QAEDA,EADEU,EAASV,KAAOS,EAAoB,EAAIG,EACnCV,EAAQQ,EAASV,KAAMS,GAEvBV,EAASW,EAASV,KAAMjB,EAAkB1C,OAGjDsD,EADEe,EAASf,IAAMf,EAAgBtC,OAASqE,EACpCJ,EAAgBG,EAASf,IAAKf,EAAgBtC,OAAQyC,EAAkBzC,QAExEgE,EAAaI,EAASf,KAE9B,MACF,IAAK,SAEDA,EADEe,EAASf,IAAMf,EAAgBtC,OAAS,EAAIqE,EACxCjB,EAAOgB,EAASf,IAAKf,EAAgBtC,QAErCuD,EAAUa,EAASf,IAAKZ,EAAkBzC,QAGhD0D,EADEU,EAASV,KAAOS,EAAoBG,EAC/BP,EAAeK,EAASV,KAAMS,EAAmB1B,EAAkB1C,OAEnE+D,EAAcM,EAASV,MAEhC,MACF,IAAK,OAEDA,EADEU,EAASV,KAAOS,EAAoB,EAAI,EACnCV,EAASW,EAASV,KAAMjB,EAAkB1C,OAE1C6D,EAAQQ,EAASV,KAAMS,GAG9Bd,EADEe,EAASf,IAAMf,EAAgBtC,OAASqE,EACpCJ,EAAgBG,EAASf,IAAKf,EAAgBtC,OAAQyC,EAAkBzC,QAExEgE,EAAaI,EAASf,KAInC,CACD,MAAO,CAACK,KAAIA,EAAEL,IAAGA,EAAEtD,MAAO,GAAAI,OAAGgE,EAAiB,MAChD,GAAG,CAAC7B,EAAiBG,IASrB,OACExC,EAACmB,EAAgBmD,SAAQrE,EAAA,CACvBsE,MAAO,CACLhF,SAAQA,EACRe,0BAA2BgC,EAC3BhD,4BAA6BmD,EAC7BhC,gBAbkB,WACjBiB,IACHM,GAAY,GACsB,mBAAvBV,GAAmCA,GAAmB,GAErE,EASMC,aAAYA,EACZf,YAAWA,EACXc,mBAAkBA,EAClBjC,aAzHe,WACnB2C,GAAY,SAACiB,GAEX,MADkC,mBAAvB3B,GAAmCA,GAAoB2B,IAC1DA,CACV,GACF,EAqHM1C,SAAQA,IAGV,CAAAzB,SAAAkB,EAAA,MAAAC,EAAA,CAAKG,IAAKI,EAAazB,UAAW,mBAAYA,GAAa,IAAI,YAAaQ,GAAcN,YACvFH,OAIT,EAOaM,EAAc,WAAM,OAAAoF,EAAWrD,EAAoC,ECzL1EsD,EAAoD,SAACC,GAClD,IAAA3F,EAAgC2F,EAAvB3F,UAAED,EAAqB4F,EAAb5F,SAAKG,EAAQC,EAAAwF,EAAjC,CAAA,YAAA,aAEN,OACE1E,EAAA,MAAAC,EAAA,CAAKlB,UAAW,8BAAuBA,GAAa,KAAUE,EAAI,CAAAH,SAC/DA,IAGP,ECRM6F,EAAgD,SAACD,GAC9C,IAAA3F,EAAgC2F,EAAvB3F,UAAED,EAAqB4F,EAAb5F,SAAKG,EAAQC,EAAAwF,EAAjC,CAAA,YAAA,aAEN,OACE1E,EAAA,MAAAC,EAAA,CAAKlB,UAAW,4BAAqBA,GAAa,KAAUE,EAAI,CAAAH,SAC7DA,IAGP,ECRM8F,EAAoD,SAACF,GAClD,IAAA3F,EAAgC2F,EAAvB3F,UAAED,EAAqB4F,EAAb5F,SAAKG,EAAQC,EAAAwF,EAAjC,CAAA,YAAA,aAEN,OACE1E,EAAA,MAAAC,EAAA,CAAKlB,UAAW,8BAAuBA,GAAa,KAAUE,EAAI,CAAAH,SAC/DA,IAGP,ECqCM+F,EAAwC,SAACH,GACtC,IAAA3F,EACL2F,EAAK3F,UADW+F,EAChBJ,EAD8BI,eAAEC,EAChCL,EADoCK,KAAEjG,EACtC4F,EAAK5F,SAD2CkG,EAChDN,EAAKM,QADoDC,EACzDP,EADgEO,QAAEC,EAClER,EADuEQ,MAAEC,EACzET,EAAKS,QAD6EC,EAClFV,EADsFU,KAAQC,GAC9FX,EAD4FY,KAC5FZ,EAAKW,MAD+FE,EACpGb,EAAKa,QAD2GtG,EAChHC,EAAAwF,EADI,CAAA,YAAA,iBAAA,OAAA,WAAA,UAAA,UAAA,QAAA,UAAA,OAAA,OAAA,OAAA,YAGAc,EAAavG,GAAQA,EAAK,eAAiBA,EAAK,eAAiB,mBAAgByD,EACjF+C,EAAkBhG,EAAO,MAU/BC,GAAU,WAQR,OAPI2F,GAAQP,IAAmBE,IAC7BU,aAAaD,EAAW9F,SACxB8F,EAAW9F,QAAUgG,YAAW,WACP,mBAAZJ,GAAwBA,GAAQ,EAC5C,GAAE,MAGE,WACLG,aAAaD,EAAW9F,QAC1B,CACF,GAAG,CAAC0F,IAEJ,IAKM1E,EAAU0E,EACdO,EAAK,MAAA3F,EAAA,CAAAlB,UAAW,GAAGmB,OAAA4E,EAAiB,SAAW,GAAmB,kBAAA5E,OA3B9D+E,EAAgB,UAChBC,EAAc,QACdE,EAAa,OACbD,EAAgB,UACH,OAuBwD,KAAAjF,OAAInB,GAAa,KAAUE,EACjG,CAAAH,SAAA,CAAmB,mBAAZkG,GAA0BhF,GAPpB,WAAM,OACtBA,EAAA,SAAAC,EAAA,CAAQ4F,KAAK,SAAS9G,UAAU,4BAA4BoB,QAAS6E,EAAsB,cAAAQ,QAAc9C,aACvG1C,EAAM,OAAAC,EAAA,CAAAlB,UAAU,kBAA6B,CAAAD,SAAA,aAEhD,GAG+C,CAAA,GAC3CiG,EACCa,EACEE,EAAA,CAAAhH,SAAA,CAAAkB,EAAA,MAAAC,EAAA,CAAKlB,UAAU,qBAAqB,CAAAD,SAAAiG,KACpC/E,WAAKjB,UAAU,wBAAsB,CAAAD,SAAEA,QACtC,MAKL,KAEEiH,EAAYjF,SAASC,eAAe,SAAWD,SAASI,KAC9D,OAAI4D,EAAuB9D,EAASC,aAAaN,EAASoF,GACnDpF,CACT,EC5EMqF,EAA6C,SAACnH,GAClD,IAAAwG,EAAIxG,EAAAwG,KACJvG,EAAQD,EAAAC,SACRmH,EAAKpH,EAAAoH,MACLC,EAAMrH,EAAAqH,OACNlB,EAAOnG,EAAAmG,QACPmB,EAAetH,EAAAsH,gBACfC,EAAQvH,EAAAuH,SACRrH,EAASF,EAAAE,UACTsH,EAASxH,EAAAwH,UACNpH,EAAIC,EAAAL,EAV2C,qGAY5CyH,EAAc7G,EAAuB,MACrC8G,EAA6B,SAAC3D,GAC9BA,GAASA,EAAMC,SAEbyD,GAAeA,EAAY3G,UAAY2G,EAAY3G,QAAQoD,SAASH,EAAMC,UAAoBwD,GAC7FC,GACCA,EAAY3G,UACX2G,EAAY3G,QAAQoD,SAASH,EAAMC,SACpCwD,GACAA,EAAU1G,UACT0G,EAAU1G,QAAQoD,SAASH,EAAMC,UACtCwC,GAEAL,GAGN,EAaA,OAXAtF,GAAU,WAMR,OALKyG,GAAqBlH,GAAQA,EAAK,yBAGrC6B,SAASkC,iBAAiB,QAASuD,GAFnCzF,SAASkC,iBAAiB,YAAauD,GAIlC,WACLzF,SAASoC,oBAAoB,YAAaqD,GAC1CzF,SAASoC,oBAAoB,QAASqD,EACxC,CACF,IACOlB,EACLO,EACE,MAAA3F,EAAA,CAAAG,IAAKkG,EACLvH,UAAW,iBAAAmB,OAAiBnB,GAAa,IAAI,cAChCE,EAAK,eAAiBA,EAAK,oBAAiByD,GACrDzD,EAAI,CAAAH,SAAA,CAER8G,EAAK,MAAA3F,EAAA,CAAAlB,UAAU,mCACZkH,GAASjG,EAAK,MAAAC,EAAA,CAAAlB,UAAU,mBAAmB,CAAAD,SAAAmH,KAC3CC,GACClG,EACE,MAAAC,EAAA,CAAAlB,UAAU,kCACVoB,QAASiG,EAAQ,cACJnH,EAAK,eAAiBA,EAAK,eAAiB,sBAAmByD,GAAS,CAAA5D,SAEpFoH,KAIJC,GACCnG,EACE,SAAAC,EAAA,CAAA4F,KAAK,SACL9G,UAAU,sBACVoB,QAAS6E,EAAO,cACH/F,EAAK,eAAiBA,EAAK,eAAiB,qBAAkByD,GAAS,CAAA5D,SAEpFkB,EAAM,OAAAC,EAAA,CAAAlB,UAAU,kBAAgB,CAAAD,SAAA,kBAItCkB,EAAK,MAAAC,EAAA,CAAAlB,UAAU,sBAAoB,CAAAD,SAAEA,SAErC,IACN,ECjDM0H,EAAkC,SAAC9B,GAChC,IAAA+B,EAA6D/B,EAAK+B,OAA1DR,EAAqDvB,EAAhDuB,MAAES,EAA8ChC,EAAjCgC,cAAEC,EAA+BjC,EAAKiC,QAA3B5H,EAAsB2F,EAAK3F,UAAbE,EAAQC,EAAAwF,EAA9D,CAAA,SAAA,QAAA,gBAAA,UAAA,cACAkC,EAAiBnH,EAA0B,MAiCjD,OACEmG,EACE,MAAA3F,EAAA,CAAAlB,UAAW,cAAcmB,OAAAnB,GAAa,kBACzBE,GAAQA,EAAK,eAAiBA,EAAK,oBAAiByD,cAEhEuD,GACCjG,EACE,MAAAC,EAAA,CAAAlB,UAAU,kBAAiB,cACdE,GAAQA,EAAK,eAAiBA,EAAK,eAAiB,cAAWyD,GAE3E,CAAA5D,SAAAmH,KAGLL,WAAK7G,UAAU,oBACZ,CAAAD,SAAA,CAAA4H,GACCd,EAAA,MAAA3F,EAAA,CAAKlB,UAAU,uCACb6G,EACE,SAAA3F,EAAA,CAAA4F,KAAK,SACLzF,IAAKwG,EACL7H,UAAU,kBACVoB,QAASuG,EAAcG,aACV,cAAA5H,GAAQA,EAAK,eAAiBA,EAAK,eAAiB,mBAAgByD,GAEhF,CAAA5D,SAAA,CAAA4H,EAAcI,MAAMC,OAAS,GAAK/G,EAAK,MAAAC,EAAA,CAAAlB,UAAU,eAAa,CAAAD,SAAE4H,EAAcI,MAAMC,UACrF/G,EAAM,OAAAC,EAAA,CAAAlB,UAAU,kBAAgB,CAAAD,SAAA,uBAElCkB,EAACgG,EACC/F,EAAA,CAAAoF,KAAMqB,EAAcM,UACpBjI,UAAU,0CACVkH,MAAOS,EAAcT,MACrBjB,QAAS0B,EAAcG,aACvBX,OAAQQ,EAAcR,OACtBE,SAAUM,EAAcN,SACxBC,UAAWO,aAEVF,EAAcI,MAAMC,OAAS,EAC1BL,EAAcI,MAAMG,KAAI,SAACC,EAAqBC,GAAQ,OA3D3C,SAACC,EAA8BD,SARhCtB,EASxB,OACEwB,EAACxC,EAAY5E,EAAA,CAAA,EATF,WADW4F,EAWCuB,EAAcvB,MAVV,CAACX,OAAO,GACxB,SAATW,EAAwB,CAACT,MAAM,GACtB,SAATS,EAAwB,CAACP,MAAM,GACtB,YAATO,EAA2B,CAACV,SAAS,GAClC,CAACC,MAAM,GAOV,CAAArG,UAAU,mCACVsG,KAA4B,QAAtBxG,EAAAuI,EAAc/B,YAAQ,IAAAxG,GAAAA,EAC5ByI,IAAK,2BAA2BpH,OAAAiH,GAChCpC,KAAMqC,EAAcrC,OAEnBqC,EAAcG,QACb3B,EAACnB,EACE,CAAA3F,SAAA,CAAAsI,EAAcG,OACdH,EAAcI,SACb5B,EAAA,OAAA3F,EAAA,CAAMlB,UAAU,4BAA0B,CAAAD,SAAA,CAAEsI,EAAcI,QAAQC,aAAqB,WAI5FL,EAAclG,MAAQlB,EAAC2E,EAAkB,CAAA7F,SAAAsI,EAAclG,OACvDkG,EAAcM,QAAU1H,EAAC4E,EAAkB,CAAA9F,SAAEsI,EAAcM,SAGlE,CAsCsEC,CAAmBT,EAAMC,EAAzB,IACtDT,EAAckB,oBAIxBhC,EAAA,MAAA3F,EAAA,CAAKlB,UAAU,kBAAgB,CAAAD,SAAA,CACN,iBAAf2H,EAAOoB,IACb7H,EAAK,MAAA,CAAA8H,IAAKrB,EAAOoB,IAAKE,IAAI,cAAchJ,UAAU,kBAElD0H,EAAU,IAEZb,EAAK,MAAA3F,EAAA,CAAAlB,UAAU,uBAAqB,CAAAD,SAAA,CAClCkB,EAAM,OAAAC,EAAA,CAAAlB,UAAU,gBAAgB,CAAAD,SAAA2H,EAAOR,SACtCQ,EAAOuB,UAAYhI,EAAM,OAAAC,EAAA,CAAAlB,UAAU,mBAAiB,CAAAD,SAAE2H,EAAOuB,oBAIjErB,GAAWA,EAAQI,OAAS,GAC3BnB,EAACvE,EAASpB,EAAA,CAAAlB,UAAU,uBAClB,CAAAD,SAAA,CAAAkB,EAACiI,EACC,CAAAnJ,SAAAkB,EAAA,SAAAC,EAAA,CACE4F,KAAK,SACL9G,UAAU,gCACGE,GAAQA,EAAK,eAAiBA,EAAK,eAAiB,kBAAeyD,GAEhF,CAAA5D,SAAAkB,EAAA,OAAAC,EAAA,CAAMlB,UAAU,kBAAgB,CAAAD,SAAA,oBAGpCkB,EAACK,EACE,CAAAvB,SAAA6H,EAAQM,KAAI,SAACpI,EAAiBsI,OAAhBe,EAAIrJ,EAAAqJ,KAAE/H,EAAOtB,EAAAsB,QAAW,OACrCH,EAAI,KAAAC,EAAA,CAAAlB,UAAU,gBAAgBoB,QAASA,GAAO,CAAArB,SAC3CoJ,IADkDf,EAAM,uBADtB,iBAWrD"}