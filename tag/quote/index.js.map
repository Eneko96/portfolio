{"version":3,"file":"index.js","sources":["../../src/hooks/useDevice/useDevice.tsx","../../src/components/avatar/avatar.tsx","../../src/components/badge/badge.tsx","../../src/components/quote/quote.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\n\nexport interface IUseDevice {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n}\n\n/**\n *\n * @internal\n */\nexport const useDevice = (): IUseDevice => {\n  const [isMobile, setIsMobile] = useState(false);\n  const [isTablet, setIsTablet] = useState(false);\n  const [isDesktop, setIsDesktop] = useState(false);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth <= 672) {\n        setIsMobile(true);\n        setIsTablet(false);\n        setIsDesktop(false);\n      } else if (window.innerWidth <= 1024) {\n        setIsMobile(false);\n        setIsTablet(true);\n        setIsDesktop(false);\n      } else {\n        setIsMobile(false);\n        setIsTablet(false);\n        setIsDesktop(true);\n      }\n    };\n\n    handleResize();\n\n    return () => handleResize();\n  }, []);\n  return {isMobile, isTablet, isDesktop};\n};\n","import React from 'react';\nimport Badge from '../badge/badge';\nexport enum AvatarSize {\n  small = 'small',\n  xsmall = 'xsmall',\n  big = 'big',\n}\n\nexport interface IAvatarProps {\n  /**\n   * Title of avatar image\n   */\n  title?: string;\n  /**\n   * Subtitle of avatar image\n   */\n  subtitle?: string;\n\n  /**\n   * Set the xsmall size\n   */\n  xsmall?: boolean;\n  /**\n   * Set the small size\n   */\n  small?: boolean;\n  /**\n   * Set the big size\n   */\n  big?: boolean;\n\n  /**\n   * Set if Avatar is disabled\n   */\n  disabled?: boolean;\n  /**\n   * Function that will ocurred when user click on avatar image\n   */\n  onClick?: () => void;\n  badge?: number | string;\n  /**\n   * Additional or alternative styling\n   */\n  className?: string;\n\n  [others: string]: any;\n}\n\nconst Avatar: React.FC<IAvatarProps> = (props) => {\n  const {xsmall, small, big, disabled, title, subtitle, badge, className, children, onClick, ...rest} = props;\n\n  const getSize = () => {\n    if (xsmall) {\n      return AvatarSize.xsmall;\n    }\n    if (small) {\n      return AvatarSize.small;\n    }\n    if (big) {\n      return AvatarSize.big;\n    }\n    return undefined;\n  };\n\n  const renderAvatarWrapper = () => {\n    const avatar = badge ? (\n      <div className=\"avatar-container\">\n        {renderAvatar()}\n        {xsmall ? <Badge /> : <Badge>{badge}</Badge>}\n      </div>\n    ) : (\n      <>{renderAvatar()}</>\n    );\n\n    if (title) {\n      if (subtitle) {\n        return (\n          <>\n            {avatar}\n            <div className=\"avatar-text-wrapper\">\n              <span className=\"avatar-title\">{title}</span>\n              <span className=\"avatar-subtitle\">{subtitle}</span>\n            </div>\n          </>\n        );\n      }\n      return (\n        <>\n          {avatar}\n          <span className=\"avatar-title\">{title}</span>\n        </>\n      );\n    }\n\n    return avatar;\n  };\n\n  const renderAvatar = () => {\n    if (children) {\n      const _child = children as any;\n      const _sizeStr = getSize() ? `_${getSize()}` : '';\n\n      if (typeof onClick === 'function') {\n        return (\n          <button type=\"button\" className={`avatar${_sizeStr}`} onClick={rest.onClick}>\n            {_child}\n          </button>\n        );\n      }\n      return React.cloneElement(_child, {\n        ..._child.props,\n        className: `avatar${_sizeStr} ${_child.props.className || ''}`,\n      });\n    }\n  };\n\n  return (\n    <div className={`avatar-wrapper${disabled ? '_disabled' : ''} ${className || ''}`} {...rest}>\n      {renderAvatarWrapper()}\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\nimport {useDevice} from '../../hooks/useDevice/useDevice';\n\nexport interface IBadgeProps {\n  /**\n   * Set error variant in badge\n   */\n  error?: boolean;\n  /**\n   * Set success variant in badge\n   */\n  success?: boolean;\n  /**\n   * Set small variant in badge\n   */\n  small?: boolean;\n  /**\n   * Additional or alternative styling\n   */\n  className?: string;\n\n  [others: string]: any;\n}\n\nconst Badge: React.FC<IBadgeProps> = (props) => {\n  const {children, error, success, small, className, ...rest} = props;\n  const {isMobile} = useDevice();\n  return children ? (\n    <span\n      className={`badge${small || isMobile ? '_small' : ''}${error ? '_error' : ''}${success ? '_success' : ''} ${\n        className || ''\n      }`}\n      {...rest}\n    >\n      {children}\n    </span>\n  ) : (\n    <span className={`badge_empty ${className || ''}`} {...rest} />\n  );\n};\n\nexport default Badge;\n","import React from 'react';\nimport Avatar from '../avatar/avatar';\nexport interface IQuote {\n  /**\n   * Adds the quote phrase\n   */\n  quote: string;\n  /**\n   * For setting the Avatar info\n   */\n  avatar?: {\n    img?: any;\n    title?: string;\n    subtitle?: string;\n  };\n  /**\n   * Additional styling if needed\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst Quote: React.FC<IQuote> = (props) => {\n  const {avatar, className, quote, ...rest} = props;\n\n  const content = (\n    <div className={`tag-ds quote-wrapper ${className || ''}`} {...rest}>\n      <span className=\"material-icons quote-icon\">format_quote</span>\n      <div className=\"quote\">{quote}</div>\n      {avatar && (\n        <Avatar small title={avatar.title} subtitle={avatar.subtitle} className=\"quote-avatar\">\n          {avatar.img && (typeof avatar.img === 'string' ? <img src={avatar.img} alt=\"quote-avatar\" /> : avatar.img)}\n        </Avatar>\n      )}\n    </div>\n  );\n  return content;\n};\n\nexport default Quote;\n"],"names":["AvatarSize","Badge","props","children","error","success","small","className","rest","__rest","isMobile","_a","__read","useState","setIsMobile","_b","isTablet","setIsTablet","_c","isDesktop","setIsDesktop","useEffect","handleResize","window","innerWidth","useDevice","_jsx","__assign","concat","jsx","Avatar","avatar","xsmall","big","disabled","title","subtitle","badge","onClick","getSize","renderAvatar","_child","_sizeStr","type","React","cloneElement","_jsxs","_Fragment","Fragment","quote","img","src","alt"],"mappings":"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"}