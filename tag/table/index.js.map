{"version":3,"file":"index.js","sources":["../../src/components/table/TRow.tsx","../../src/components/table/TBody.tsx","../../src/components/table/TElement.tsx","../../src/components/table/THead.tsx","../../src/components/table/table.tsx"],"sourcesContent":["import React from 'react';\n\nexport interface ITRowProps {\n  active?: boolean;\n  disabled?: boolean;\n  className?: string;\n  onClick?: () => void;\n  [others: string]: any;\n}\n\nconst TRow: React.FC<ITRowProps> = ({children, active, disabled, className, onClick, ...rest}) => {\n  return (\n    <tr\n      tabIndex={0}\n      data-disabled={disabled}\n      className={`${className || ''}${active ? 'active' : ''}`}\n      onClick={onClick}\n      {...rest}\n    >\n      {children}\n    </tr>\n  );\n};\n\nexport default TRow;\n","import React, {useCallback, useState} from 'react';\nimport TRow from './TRow';\n\nexport interface ITbodyProps {\n  className?: string;\n  [others: string]: any;\n}\n\nconst TBody: React.FC<ITbodyProps> = ({children, className, ...rest}) => {\n  const [active, setActive] = useState<number | null>(null);\n  const isValid = useCallback(() => {\n    return (\n      React.Children.toArray(children).every((_child: any) => _child.type === TRow) ||\n      React.Children.toArray(children).every((_child: any) => _child.type === 'tr')\n    );\n  }, [children]);\n\n  const overpoweredChildren = React.Children.toArray(children).map((_child: any, idx) => {\n    return React.cloneElement(_child, {\n      'data-testid': rest['data-testid'] ? rest['data-testid'] + '-body-row-' + idx : undefined,\n      active: idx === active,\n      onClick: () => {\n        if (idx === active) {\n          setActive(null);\n        } else {\n          setActive(idx);\n        }\n        if (_child.props?.onClick) _child.props.onClick();\n      },\n    });\n  });\n\n  if (isValid())\n    return (\n      <tbody className={className || 'rest'} {...rest}>\n        {overpoweredChildren}\n      </tbody>\n    );\n\n  return null;\n};\n\nexport default TBody;\n","import React from 'react';\n\nexport interface ITableElement {\n  className?: string;\n  [others: string]: any;\n}\n\nconst TElement: React.FC<ITableElement> = ({children, className, ...rest}) => (\n  <td className={className || ''} {...rest}>\n    <div className=\"table-content\">{children}</div>\n  </td>\n);\n\nexport default TElement;\n","import React from 'react';\n\nexport interface ITHeadProps {\n  className?: string;\n  [others: string]: any;\n}\n\nconst THead: React.FC<ITHeadProps> = ({children, className, ...rest}) => (\n  <thead {...rest} className={className || ''}>\n    {children}\n  </thead>\n);\n\nexport default THead;\n","import React from 'react';\nexport {default as TBody} from './TBody';\nexport {default as TElement} from './TElement';\nexport {default as THead} from './THead';\nexport {default as TRow} from './TRow';\nexport interface ITableProps {\n  disabled?: boolean;\n  className?: string;\n  [others: string]: any;\n}\n\nconst Table: React.FC<ITableProps> = ({disabled, children, className, ...rest}) => {\n  return (\n    <>\n      <div className=\"table-rotate-device\">\n        <span className=\"material-icons\">screen_rotation</span>\n        <span className=\"table-rotate-device-text\">Rotate your device</span>\n      </div>\n      <div className=\"table-wrapper\">\n        <table\n          data-disabled={disabled}\n          className={className || ''}\n          role=\"none\"\n          {...rest}\n          data-testid={rest['data-testid'] ? rest['data-testid'] + '-wrapper' : ''}\n        >\n          {children}\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default Table;"],"names":["TRow","_a","children","active","disabled","className","onClick","rest","__rest","_jsx","__assign","tabIndex","concat","_b","__read","useState","setActive","isValid","useCallback","React","Children","toArray","every","_child","type","overpoweredChildren","map","idx","cloneElement","undefined","props","jsx","_jsxs","_Fragment","role"],"mappings":"wuBAUM,IAAAA,EAA6B,SAACC,GAAC,IAAAC,EAAQD,EAAAC,SAAEC,EAAMF,EAAAE,OAAEC,EAAQH,EAAAG,SAAEC,EAASJ,EAAAI,UAAEC,EAAOL,EAAAK,QAAKC,EAAIC,EAAAP,EAAxD,wDAClC,OACEQ,MAAA,KAAAC,EAAA,CACEC,SAAU,EACK,gBAAAP,EACfC,UAAW,GAAGO,OAAAP,GAAa,WAAKF,EAAS,SAAW,IACpDG,QAASA,GACLC,EAAI,CAAAL,SAEPA,IAGP,gBCdqC,SAACD,GAAC,IAAAC,aAAUG,cAAcE,EAAzBC,EAAAP,EAAA,CAAA,WAAA,cAC9BY,yRAAAC,CAAsBC,EAAQA,SAAgB,MAAK,GAAlDZ,EAAMU,EAAA,GAAEG,OACTC,EAAUC,EAAAA,aAAY,WAC1B,OACEC,EAAK,QAACC,SAASC,QAAQnB,GAAUoB,OAAM,SAACC,GAAgB,OAAAA,EAAOC,OAASxB,CAAhB,KACxDmB,EAAAA,QAAMC,SAASC,QAAQnB,GAAUoB,OAAM,SAACC,GAAgB,MAAgB,OAAhBA,EAAOC,IAAa,GAEhF,GAAG,CAACtB,IAEEuB,EAAsBN,UAAMC,SAASC,QAAQnB,GAAUwB,KAAI,SAACH,EAAaI,GAC7E,OAAOR,EAAK,QAACS,aAAaL,EAAQ,CAChC,cAAehB,EAAK,eAAiBA,EAAK,eAAiB,aAAeoB,OAAME,EAChF1B,OAAQwB,IAAQxB,EAChBG,QAAS,iBAELU,EADEW,IAAQxB,EACA,KAEAwB,YAER1B,EAAAsB,EAAOO,4BAAOxB,UAASiB,EAAOO,MAAMxB,SACzC,GAEL,IAEA,OAAIW,IAEAR,EAAAsB,IAAA,QAAArB,EAAA,CAAOL,UAAWA,GAAa,QAAYE,EAAI,CAAAL,SAC5CuB,KAIA,IACT,mBCjC0C,SAACxB,GAAC,IAAAC,aAAUG,cAAcE,EAAzBC,EAAAP,EAAA,CAAA,WAAA,cAAmC,OAC5EQ,EAAIsB,IAAA,KAAArB,EAAA,CAAAL,UAAWA,GAAa,IAAQE,YAClCE,EAAAA,IAAK,MAAAC,EAAA,CAAAL,UAAU,iBAAe,CAAAH,SAAEA,uBCFC,SAACD,GAAC,IAAAC,aAAUG,cAAcE,EAAzBC,EAAAP,EAAA,CAAA,WAAA,cAAmC,OACvEQ,EAAAsB,IAAA,QAAArB,EAAA,CAAA,EAAWH,EAAI,CAAEF,UAAWA,GAAa,IAAE,CAAAH,SACxCA,qCCEgC,SAACD,GAAC,IAAAG,EAAQH,EAAAG,SAAEF,EAAQD,EAAAC,SAAEG,EAASJ,EAAAI,UAAKE,EAAnCC,EAAAP,EAAA,CAAA,WAAA,WAAA,cACpC,OACE+B,EAAAA,KAAAC,EAAAA,SAAA,CAAA/B,SAAA,CACE8B,EAAAA,KAAK,MAAAtB,EAAA,CAAAL,UAAU,uBACb,CAAAH,SAAA,CAAAO,EAAAA,IAAA,OAAAC,EAAA,CAAML,UAAU,kBAAgB,CAAAH,SAAA,qBAChCO,EAAAA,IAAA,OAAAC,EAAA,CAAML,UAAU,4BAA0B,CAAAH,SAAA,4BAE5CO,EAAKsB,IAAA,MAAArB,EAAA,CAAAL,UAAU,iBACb,CAAAH,SAAAO,MAAA,QAAAC,EAAA,CAAA,gBACiBN,EACfC,UAAWA,GAAa,GACxB6B,KAAK,QACD3B,EACS,CAAA,cAAAA,EAAK,eAAiBA,EAAK,eAAiB,WAAa,IAAE,CAAAL,SAEvEA,UAKX"}