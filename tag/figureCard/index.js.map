{"version":3,"file":"index.js","sources":["../../src/components/figureCard/cardFigure.tsx","../../src/components/card/cardHeader.tsx","../../src/components/card/cardBody.tsx","../../src/components/card/cardFloatIcon.tsx","../../src/components/figureCard/figureCard.tsx"],"sourcesContent":["import React from 'react';\n\nexport interface ICardFigureProps {\n  /**\n   * Identifies the accordion item\n   */\n  id?: string;\n  /**\n   * Add class to accordion\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst CardFigure: React.FC<ICardFigureProps> = (props) => {\n  const {id, children, className, ...rest} = props;\n\n  return (\n    <div id={id || ''} className={`card-figure ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default CardFigure;\n","import React from 'react';\n\nexport interface ICardHeaderProps {\n  /**\n   * Identifies the accordion item\n   */\n  id?: string;\n  /**\n   * Add class to accordion\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst CardHeader: React.FC<ICardHeaderProps> = (props) => {\n  const {id, children, className, ...rest} = props;\n\n  return (\n    <div id={id || ''} className={`card-header ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default CardHeader;\n","import React from 'react';\n\nexport interface ICardBodyProps {\n  /**\n   * Identifies the accordion item\n   */\n  id?: string;\n  /**\n   * Add class to accordion\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst CardBody: React.FC<ICardBodyProps> = (props) => {\n  const {id, children, className, ...rest} = props;\n\n  return (\n    <div id={id || ''} className={`card-body ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default CardBody;\n","import React from 'react';\nexport interface ICardFloatIconProps {\n  /**\n   * Identifies the accordion item\n   */\n  id?: string;\n  /**\n   * Add class to accordion\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst CardFloatIcon: React.FC<ICardFloatIconProps> = (props) => {\n  const {id, children, className, ...rest} = props;\n\n  const renderFloatIcon = () => {\n    if (children) {\n      const _child: any = React.Children.toArray(children)[0];\n      let _renderChild: any;\n      let _clasNameProps = '';\n      if (_child) {\n        if (_child.props && _child.props.className) _clasNameProps = _child.props.className;\n        _renderChild = React.cloneElement(_child, {\n          ..._child.props,\n          id: id,\n          className: `card-float-icon ${_clasNameProps || ''} ${className || ''}`,\n          ...rest,\n        });\n        return _renderChild;\n      }\n    }\n\n    return <></>;\n  };\n\n  return renderFloatIcon();\n};\n\nexport default CardFloatIcon;\n","import React from 'react';\n\nimport FigureCardFigure from './cardFigure';\nimport FigureCardHeader from '../card/cardHeader';\nimport FigureCardBody from '../card/cardBody';\nimport FigureCardFloatIcon from '../card/cardFloatIcon';\n\nexport {default as FigureCardFigure} from './cardFigure';\nexport {default as FigureCardHeader} from '../card/cardHeader';\nexport {default as FigureCardBody} from '../card/cardBody';\nexport {default as FigureCardFloatIcon} from '../card/cardFloatIcon';\n\nexport interface IFigureCardProps {\n  /**\n   * Identifies the card\n   */\n  id?: string;\n  /**\n   * Add class to card\n   */\n  className?: string;\n  /**\n   * Set card selected\n   */\n  selected?: boolean;\n  /**\n   * Set accent background\n   */\n  accent?: boolean;\n  /**\n   * onClick function\n   */\n  onClick?: () => void;\n  /**\n   *\n   * Parts of card, one of this is required\n   */\n  children:\n    | React.ReactElement<\n        typeof FigureCardHeader | typeof FigureCardBody | typeof FigureCardFigure | typeof FigureCardFloatIcon\n      >[]\n    | React.ReactElement<\n        typeof FigureCardHeader | typeof FigureCardBody | typeof FigureCardFigure | typeof FigureCardFloatIcon\n      >;\n  [others: string]: any;\n}\n\nconst FigureCard: React.FC<IFigureCardProps> = (props) => {\n  const {id, children, className, selected, accent, onClick, ...rest} = props;\n\n  const renderFigureCard = () => {\n    let cardFigure: any;\n    let cardFloatIcon: any;\n    const contentChildrens: any[] = [];\n    let widthStyle = undefined;\n    if (children) {\n      React.Children.forEach(children, (_childItem: any) => {\n        if (_childItem)\n          if (_childItem.type === FigureCardHeader || _childItem.type === FigureCardBody) contentChildrens.push(_childItem);\n          else if (_childItem.type === FigureCardFigure) cardFigure = _childItem;\n          else if (_childItem.type === FigureCardFloatIcon) cardFloatIcon = _childItem;\n      });\n\n      if (cardFigure && cardFloatIcon) {\n        let _cardFigureChildrens: any = [];\n        if (cardFigure.props && cardFigure.props.children) _cardFigureChildrens = cardFigure.props.children;\n        cardFigure = React.cloneElement(cardFigure, {\n          ...cardFigure.props,\n          children: [].concat(cardFloatIcon, _cardFigureChildrens),\n        });\n        if (!contentChildrens.length) widthStyle = 'fit-content';\n      }\n    }\n\n    return (\n      <div\n        id={id || ''}\n        className={`card_figure${accent ? '_accent' : ''}${selected ? '_selected' : ''} ${className || ''}`}\n        style={{width: widthStyle}}\n        onClick={onClick}\n        {...rest}\n      >\n        {cardFigure}\n        {contentChildrens}\n      </div>\n    );\n  };\n\n  return renderFigureCard();\n};\n\nexport default FigureCard;\n"],"names":["CardFigure","props","id","children","className","rest","_jsx","CardHeader","CardBody","CardFloatIcon","_child","React","Children","toArray","_clasNameProps","cloneElement","__assign","concat","renderFloatIcon","selected","accent","onClick","__rest","cardFigure","cardFloatIcon","contentChildrens","widthStyle","undefined","forEach","_childItem","type","FigureCardHeader","FigureCardBody","push","FigureCardFigure","FigureCardFloatIcon","_cardFigureChildrens","length","_jsxs","style","width","renderFigureCard"],"mappings":"ouBAcM,IAAAA,EAAyC,SAACC,GACvC,IAAAC,EAAoCD,EAAKC,GAArCC,EAAgCF,EAAxBE,SAAEC,EAAsBH,YAARI,IAAQJ,EAArC,CAAkC,KAAA,WAAA,cAExC,OACEK,EAAAA,aAAKJ,GAAIA,GAAM,GAAIE,UAAW,sBAAeA,GAAa,KAAUC,EACjE,CAAAF,SAAAA,IAGP,ECRMI,EAAyC,SAACN,GACvC,IAAAC,EAAoCD,EAAKC,GAArCC,EAAgCF,EAAxBE,SAAEC,EAAsBH,YAARI,IAAQJ,EAArC,CAAkC,KAAA,WAAA,cAExC,OACEK,EAAAA,aAAKJ,GAAIA,GAAM,GAAIE,UAAW,sBAAeA,GAAa,KAAUC,EACjE,CAAAF,SAAAA,IAGP,ECRMK,EAAqC,SAACP,GACnC,IAAAC,EAAoCD,EAAKC,GAArCC,EAAgCF,EAAxBE,SAAEC,EAAsBH,YAARI,IAAQJ,EAArC,CAAkC,KAAA,WAAA,cAExC,OACEK,EAAAA,aAAKJ,GAAIA,GAAM,GAAIE,UAAW,oBAAaA,GAAa,KAAUC,EAC/D,CAAAF,SAAAA,IAGP,ECTMM,EAA+C,SAACR,GAC7C,IAAAC,EAAoCD,EAAKC,GAArCC,EAAgCF,EAAxBE,SAAEC,EAAsBH,YAARI,IAAQJ,EAArC,CAAkC,KAAA,WAAA,cAsBxC,OApBwB,WACtB,GAAIE,EAAU,CACZ,IAAMO,EAAcC,EAAAA,QAAMC,SAASC,QAAQV,GAAU,GAEjDW,EAAiB,GACrB,GAAIJ,EAQF,OAPIA,EAAOT,OAASS,EAAOT,MAAMG,YAAWU,EAAiBJ,EAAOT,MAAMG,WAC3DO,EAAK,QAACI,aAAaL,EAC7BM,EAAAA,EAAAA,EAAA,CAAA,EAAAN,EAAOT,OACV,CAAAC,GAAIA,EACJE,UAAW,mBAAAa,OAAmBH,GAAkB,GAAE,KAAAG,OAAIb,GAAa,MAChEC,GAIR,CAED,OAAOC,oBACT,CAEOY,EACT,+HCU+C,SAACjB,GACvC,IAAAC,EAA+DD,EAA7DC,GAAEC,EAA2DF,EAAnDE,SAAEC,EAAiDH,EAAxCG,UAAEe,EAAsClB,EAA9BkB,SAAEC,EAA4BnB,EAAtBmB,OAAEC,EAAoBpB,EAAboB,QAAKhB,EAAQiB,EAAArB,EAAhE,CAAA,KAAA,WAAA,YAAA,WAAA,SAAA,YAwCN,OAtCyB,WACvB,IAAIsB,EACAC,EACEC,EAA0B,GAC5BC,OAAaC,EACjB,GAAIxB,IACFQ,EAAAA,QAAMC,SAASgB,QAAQzB,GAAU,SAAC0B,GAC5BA,IACEA,EAAWC,OAASC,GAAoBF,EAAWC,OAASE,EAAgBP,EAAiBQ,KAAKJ,GAC7FA,EAAWC,OAASI,EAAkBX,EAAaM,EACnDA,EAAWC,OAASK,IAAqBX,EAAgBK,GACtE,IAEIN,GAAcC,GAAe,CAC/B,IAAIY,EAA4B,GAC5Bb,EAAWtB,OAASsB,EAAWtB,MAAME,WAAUiC,EAAuBb,EAAWtB,MAAME,UAC3FoB,EAAaZ,EAAK,QAACI,aAAaQ,EAAUP,EAAAA,EAAA,CAAA,EACrCO,EAAWtB,OAAK,CACnBE,SAAU,GAAGc,OAAOO,EAAeY,MAEhCX,EAAiBY,SAAQX,EAAa,cAC5C,CAGH,OACEY,EAAAA,KACE,MAAAtB,EAAA,CAAAd,GAAIA,GAAM,GACVE,UAAW,cAAca,OAAAG,EAAS,UAAY,IAAEH,OAAGE,EAAW,YAAc,GAAM,KAAAF,OAAAb,GAAa,IAC/FmC,MAAO,CAACC,MAAOd,GACfL,QAASA,GACLhB,EAEH,CAAAF,SAAA,CAAAoB,EACAE,KAGP,CAEOgB,EACT"}