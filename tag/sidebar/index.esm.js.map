{"version":3,"file":"index.esm.js","sources":["../../src/components/sidebar/sidebarLogo.tsx","../../src/components/dropdown/dropdownButton.tsx","../../src/components/dropdown/dropdownMenu.tsx","../../src/components/dropdown/dropdown.tsx","../../src/components/sidebar/sidebarButton.tsx","../../src/components/sidebar/sidebarDivider.tsx","../../src/components/sidebar/sidebar.tsx"],"sourcesContent":["import React from 'react';\n\nexport interface ISidebarLogoProps {\n  /**\n   * Add class to sidebar logo\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst SidebarLogo: React.FC<ISidebarLogoProps> = (props) => {\n  const {children, className, ...rest} = props;\n\n  return (\n    <div className={`sidebar-logo ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default SidebarLogo;\n","import React, {useEffect} from 'react';\nimport {useDropdown} from './dropdown';\nexport interface DropdownButtonProps {\n  className?: string;\n  disabled?: boolean;\n  children: React.ReactNode;\n\n  [others: string]: any;\n}\n\nconst DropdownButton: React.FC<DropdownButtonProps> = ({children, className, disabled, ...rest}) => {\n  const {onToggleMenu, setDropdownButtonDimensions, showMenu} = useDropdown();\n  const dropdownButtonRef = React.useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (dropdownButtonRef && dropdownButtonRef.current) {\n      const positionButton = dropdownButtonRef.current.getBoundingClientRect();\n      if (positionButton) setDropdownButtonDimensions({width: positionButton.width, height: positionButton.height});\n    }\n  }, [showMenu]);\n  return (\n    <div\n      className={`dropdown-button${disabled ? '_disabled' : ''} ${className || ''}`}\n      onClick={onToggleMenu}\n      ref={dropdownButtonRef}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default React.memo(DropdownButton);\n","import React, {useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useDropdown} from './dropdown';\n\nexport interface DropdownMenuProps {\n  className?: string;\n  [others: string]: any;\n}\n\nconst DropdownMenu: React.FC<DropdownMenuProps> = ({className, children, ...rest}) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const {showMenu, setDropdownMenuDimensions, position, dropdownRef, handleClickMenu} = useDropdown();\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      const positionMenu = ref.current.getBoundingClientRect();\n      if (positionMenu)\n        setDropdownMenuDimensions({\n          width: positionMenu.width,\n          height: positionMenu.height,\n        });\n    }\n  }, [showMenu]);\n\n  const content = (\n    <div\n      ref={ref}\n      className={`dropdown-menu ${showMenu ? '' : 'hidden'} ${className || ''}`}\n      style={position}\n      onClick={handleClickMenu}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n  if (dropdownRef && dropdownRef.current) {\n    const root = document.getElementById('root');\n    return ReactDOM.createPortal(content, dropdownRef.current || root || document.body);\n  }\n  return null;\n};\n\nexport default DropdownMenu;\n","import React, {useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport {default as DropdownButton} from './dropdownButton';\nexport {default as DropdownMenu} from './dropdownMenu';\nconst DropdownContext = React.createContext({});\ntype DropdownPosition = 'top' | 'bottom' | 'right' | 'left';\ninterface DropdownProps {\n  className?: string;\n  onChangeToggleMenu?: (state: boolean) => void;\n  itemsDivider?: boolean;\n  forceRefresh?: number;\n  defaultShow?: boolean;\n  keepShown?: boolean;\n  placement?: DropdownPosition;\n  [others: string]: any;\n}\n\ninterface IDropdownContext {\n  showMenu: boolean;\n  setDropdownMenuDimensions: (dimensions: {width: number; height: number}) => void;\n  setDropdownButtonDimensions: (dimensions: {width: number; height: number}) => void;\n  handleClickMenu: (e: React.MouseEvent<HTMLDivElement>) => void;\n  position: {left: string; top: string};\n  itemsDivider: boolean;\n  dropdownRef: React.RefObject<HTMLDivElement>;\n  onToggleMenu: () => void;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({\n  children,\n  className,\n  onChangeToggleMenu,\n  itemsDivider,\n  forceRefresh,\n  defaultShow,\n  keepShown = false,\n  placement = 'bottom',\n  ...rest\n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [refresh, setRefresh] = useState(forceRefresh ? forceRefresh : 0);\n  const [dropdownMenuDim, setDropdownMenuDim] = useState({width: 0, height: 0});\n  const [dropdownButtonDim, setDropdownButtonDim] = useState({width: 0, height: 0});\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (defaultShow !== undefined && defaultShow !== showMenu) {\n      setShowMenu(defaultShow as boolean);\n    }\n  }, [defaultShow]);\n\n  useEffect(() => {\n    if (forceRefresh && refresh !== forceRefresh) setRefresh(forceRefresh);\n  }, [forceRefresh, refresh]);\n\n  const onToggleMenu = () => {\n    setShowMenu((prev) => {\n      if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(!prev);\n      return !prev;\n    });\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (event && event.target) {\n      if (\n        dropdownRef &&\n        dropdownRef.current &&\n        dropdownRef.current.getAttribute('data-show') === 'true' &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setShowMenu(false);\n        if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('scroll', () => setRefresh((prev) => prev++));\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n      document.removeEventListener('scroll', () => setRefresh((prev) => prev++));\n    };\n  }, []);\n\n  const topStr = (top: number, menuHeight: number) => `calc(${top}px - ${menuHeight}px - var(--unit))`;\n  const bottomStr = (top: number, buttonHeight: number) => `calc(${top}px + ${buttonHeight}px + var(--unit))`;\n  const rightStr = (left: number, buttonWidth: number) => `calc(${left}px + ${buttonWidth}px + var(--unit))`;\n  const leftStr = (left: number, menuWidth: number) => `calc(${left}px - ${menuWidth}px - var(--unit))`;\n  const leftAlignment = (left: number) => `${left}px`;\n  const rightAlignment = (left: number, menuWidth: number, buttonWidth: number) =>\n    `calc(${left}px + ${buttonWidth}px - ${menuWidth}px)`;\n  const topAlignment = (top: number) => `${top}px`;\n  const bottomAlignment = (top: number, menuHeight: number, buttonHeight: number) =>\n    `calc(${top}px + ${buttonHeight}px - ${menuHeight}px)`;\n\n  const position = useMemo(() => {\n    let left,\n      top = '',\n      dropdownMenuWidth = 0;\n\n    if (dropdownRef && dropdownRef.current) {\n      const position = dropdownRef.current.getBoundingClientRect();\n      dropdownMenuWidth = dropdownMenuDim.width < dropdownButtonDim.width ? dropdownButtonDim.width : dropdownMenuDim.width;\n      const {clientHeight, clientWidth} = document.body;\n      switch (placement) {\n        case 'top':\n          if (position.top - dropdownMenuDim.height - 8 < 0) {\n            top = bottomStr(position.top, dropdownButtonDim.height);\n          } else {\n            top = topStr(position.top, dropdownMenuDim.height);\n          }\n          if (position.left + dropdownMenuWidth > clientWidth) {\n            left = rightAlignment(position.left, dropdownMenuWidth, dropdownButtonDim.width);\n          } else {\n            left = leftAlignment(position.left);\n          }\n          break;\n        case 'right':\n          if (position.left + dropdownMenuWidth + 8 > clientWidth) {\n            left = leftStr(position.left, dropdownMenuWidth);\n          } else {\n            left = rightStr(position.left, dropdownButtonDim.width);\n          }\n          if (position.top + dropdownMenuDim.height > clientHeight) {\n            top = bottomAlignment(position.top, dropdownMenuDim.height, dropdownButtonDim.height);\n          } else {\n            top = topAlignment(position.top);\n          }\n          break;\n        case 'bottom':\n          if (position.top + dropdownMenuDim.height + 8 > clientHeight) {\n            top = topStr(position.top, dropdownMenuDim.height);\n          } else {\n            top = bottomStr(position.top, dropdownButtonDim.height);\n          }\n          if (position.left + dropdownMenuWidth > clientWidth) {\n            left = rightAlignment(position.left, dropdownMenuWidth, dropdownButtonDim.width);\n          } else {\n            left = leftAlignment(position.left);\n          }\n          break;\n        case 'left':\n          if (position.left - dropdownMenuWidth - 8 < 0) {\n            left = rightStr(position.left, dropdownButtonDim.width);\n          } else {\n            left = leftStr(position.left, dropdownMenuWidth);\n          }\n          if (position.top + dropdownMenuDim.height > clientHeight) {\n            top = bottomAlignment(position.top, dropdownMenuDim.height, dropdownButtonDim.height);\n          } else {\n            top = topAlignment(position.top);\n          }\n          break;\n      }\n    }\n    return {left, top, width: `${dropdownMenuWidth}px`};\n  }, [dropdownMenuDim, dropdownButtonDim]);\n\n  const handleClickMenu = () => {\n    if (!keepShown) {\n      setShowMenu(false);\n      if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(false);\n    }\n  };\n\n  return (\n    <DropdownContext.Provider\n      value={{\n        showMenu,\n        setDropdownMenuDimensions: setDropdownMenuDim,\n        setDropdownButtonDimensions: setDropdownButtonDim,\n        handleClickMenu,\n        itemsDivider,\n        dropdownRef,\n        onChangeToggleMenu,\n        onToggleMenu,\n        position,\n      }}\n    >\n      <div ref={dropdownRef} className={`dropdown ${className || ''}`} data-show={showMenu} {...rest}>\n        {children}\n      </div>\n    </DropdownContext.Provider>\n  );\n};\n\nexport default Dropdown;\n/**\n *\n * @internal\n */\nexport const useDropdown = () => useContext(DropdownContext) as IDropdownContext;\n","import React from 'react';\nimport Dropdown, {DropdownButton, DropdownMenu} from '../dropdown/dropdown';\nimport {useSidebar} from './sidebar';\n\nexport interface ISidebarButtonProps {\n  /**\n   * Identifies the button in sidebar\n   */\n  id: string;\n  /**\n   * Set the icon element in sidebar button\n   */\n  icon: any;\n  /**\n   * Set the label element in sidebar button\n   */\n  label: string;\n  /**\n   * Set if this element is a dropdown\n   */\n  dropdown?: boolean;\n  viewMore?: boolean;\n  /**\n   * Set the route to redirect when button is clicked\n   */\n  href?: string;\n  /**\n   * Identifies if sidebar is collapsed or not\n   */\n  //collapsed?: boolean;\n  /**\n   * Set if sidebar button is selected\n   */\n  //selected?: boolean;\n  /**\n   * Set if sidebar button is disabled\n   */\n  disabled?: boolean;\n  /**\n   * Function when item is clicked\n   */\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement> | React.MouseEvent<HTMLDivElement>) => void;\n  /**\n   * Add class to sidebar button\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst SidebarButton: React.FC<ISidebarButtonProps> = ({\n  id,\n  icon,\n  label,\n  dropdown,\n  viewMore,\n  href,\n  disabled,\n  className,\n  onClick,\n  children,\n  ...rest\n}) => {\n  const {collapsed, selected, onClickItem} = useSidebar();\n  const isSelected = selected === id;\n  const handleOnClick = (e: React.MouseEvent<HTMLAnchorElement> | React.MouseEvent<HTMLDivElement>) => {\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n    onClickItem(e);\n  };\n\n  return dropdown ? (\n    <Dropdown className=\"sidebar-button_dropdown\">\n      <DropdownButton>\n        <div\n          id={id}\n          key={id}\n          className={`sidebar-button${isSelected ? '_selected' : ''}${disabled ? '_disabled' : ''} ${className || ''}`}\n          onClick={handleOnClick}\n          {...rest}\n        >\n          {icon}\n          {!collapsed && (\n            <>\n              {label}\n              {!viewMore && <span className=\"material-icons sidebar-button-arrow\">arrow_right</span>}\n            </>\n          )}\n        </div>\n      </DropdownButton>\n      <DropdownMenu>{children}</DropdownMenu>\n    </Dropdown>\n  ) : (\n    <a\n      id={id}\n      key={id}\n      className={`sidebar-button${isSelected ? '_selected' : ''}${disabled ? '_disabled' : ''} ${className || ''}`}\n      href={href}\n      onClick={handleOnClick}\n      {...rest}\n    >\n      {icon}\n      {!collapsed && <span>{label}</span>}\n    </a>\n  );\n};\n\nexport default SidebarButton;\n","import React from 'react';\nimport {useSidebar} from './sidebar';\n\nexport interface ISidebarDividerProps {\n  /**\n   * Add class to sidebar divider\n   */\n  className?: string;\n  [others: string]: any;\n}\n\nconst SidebarDivider: React.FC<ISidebarDividerProps> = (props) => {\n  const {children, className, ...rest} = props;\n  const {collapsed} = useSidebar();\n  return collapsed ? (\n    <hr className=\"sidebar-divider\" {...rest} />\n  ) : (\n    <div className={`sidebar-divider ${className || ''}`} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport default SidebarDivider;\n","import React, {useContext, useEffect, useState} from 'react';\nimport SidebarLogo from './sidebarLogo';\nexport {default as SidebarLogo} from './sidebarLogo';\nexport {default as SidebarButton} from './sidebarButton';\nexport {default as SidebarDivider} from './sidebarDivider';\nconst SidebarContext = React.createContext({});\nexport interface ISidebarProps {\n  /**\n   * Identifies the sidebar component\n   */\n  id?: string;\n  /**\n   * Change mode for sidebar in collapsed mode\n   */\n  collapsed?: boolean;\n  /**\n   * Set the default item selected, is an id of the sidebar item selected\n   */\n  defaultItemSelected?: string;\n  /**\n   * Function when item is clicked\n   */\n  onClickSidebarItem?: (itemId: string) => void;\n  /**\n   * Add class to sidebar\n   */\n  className?: string;\n  /**\n   * Callback for when the sidebar is collapsed\n   */\n  onCollapse?: (collapsed: boolean) => void;\n  [others: string]: any;\n}\n\ninterface ISidebarContext {\n  collapsed: boolean;\n  selected: string;\n  onClickItem: (e: React.MouseEvent) => void;\n}\n\nconst Sidebar: React.FC<ISidebarProps> = ({\n  id,\n  collapsed,\n  children,\n  defaultItemSelected,\n  className,\n  onClickSidebarItem,\n  onCollapse,\n  ...rest\n}) => {\n  const [isCollapsed, setCollapsed] = useState(collapsed);\n  const [itemSelected, setItemSelected] = useState(defaultItemSelected);\n\n  useEffect(() => {\n    if (defaultItemSelected && defaultItemSelected !== itemSelected) setItemSelected(defaultItemSelected);\n  }, [defaultItemSelected, itemSelected]);\n\n  const handleCollapse = () => {\n    if (typeof onCollapse === 'function') onCollapse(!isCollapsed);\n    setCollapsed(!isCollapsed);\n  };\n\n  const renderSidebarLogo = () => {\n    if (children && (children as any).length) {\n      const _sidebarLogo = (children as any).find((a: any) => a && a.type === SidebarLogo);\n      if (_sidebarLogo) {\n        return _sidebarLogo;\n      }\n    }\n    return null;\n  };\n\n  const renderSidebarChilds = () => {\n    const _sidebarChilds: any[] = [];\n    if (children) {\n      if ((children as any).length) {\n        (children as any).forEach((child: any) => {\n          if (child) {\n            if (child.type !== SidebarLogo) {\n              _sidebarChilds.push(child);\n            }\n          }\n        });\n      } else if ((children as any).type !== SidebarLogo) {\n        _sidebarChilds.push(children);\n      }\n    }\n    return _sidebarChilds;\n  };\n\n  const onClickItem = (e: React.MouseEvent<any>) => {\n    const _id = e.currentTarget.id;\n    setItemSelected(_id);\n    if (typeof onClickSidebarItem === 'function') {\n      e.preventDefault();\n      onClickSidebarItem(_id);\n    }\n  };\n\n  return (\n    <SidebarContext.Provider value={{collapsed: isCollapsed, selected: itemSelected, onClickItem}}>\n      <div id={id} className={`sidebar${isCollapsed ? '_collapsed' : ''} ${className || ''}`} {...rest}>\n        {renderSidebarLogo()}\n        <button\n          type=\"button\"\n          data-testid={rest && rest['data-testid'] ? `${rest['data-testid']}-collapsed-btn` : undefined}\n          className=\"sidebar-collapsed-button\"\n          onClick={handleCollapse}\n          key=\"sidebar-collapsed-btn\"\n        >\n          <span className=\"material-icons\">{isCollapsed ? 'menu' : 'menu_open'}</span>\n        </button>\n        {renderSidebarChilds()}\n      </div>\n    </SidebarContext.Provider>\n  );\n};\nexport default Sidebar;\n/**\n *\n * @internal\n */\nexport const useSidebar = () => useContext(SidebarContext) as ISidebarContext;\n"],"names":["SidebarLogo","props","children","className","rest","__rest","_jsx","__assign","DropdownButton$1","React","memo","_a","disabled","_b","useDropdown","onToggleMenu","setDropdownButtonDimensions","showMenu","dropdownButtonRef","useRef","useEffect","current","positionButton","getBoundingClientRect","width","height","concat","onClick","ref","DropdownMenu","setDropdownMenuDimensions","position","dropdownRef","handleClickMenu","positionMenu","content","style","root","document","getElementById","ReactDOM","createPortal","body","DropdownContext","createContext","Dropdown","onChangeToggleMenu","itemsDivider","forceRefresh","defaultShow","keepShown","_c","placement","_d","__read","useState","setShowMenu","_e","refresh","setRefresh","_f","dropdownMenuDim","setDropdownMenuDim","_g","dropdownButtonDim","setDropdownButtonDim","undefined","handleClickOutside","event","target","getAttribute","contains","addEventListener","prev","removeEventListener","topStr","top","menuHeight","bottomStr","buttonHeight","rightStr","left","buttonWidth","leftStr","menuWidth","leftAlignment","rightAlignment","topAlignment","bottomAlignment","useMemo","dropdownMenuWidth","position_1","clientHeight","clientWidth","Provider","value","useContext","SidebarButton","id","icon","label","dropdown","viewMore","href","useSidebar","collapsed","selected","onClickItem","isSelected","handleOnClick","e","_jsxs","DropdownButton","_Fragment","SidebarDivider","SidebarContext","Sidebar","defaultItemSelected","onClickSidebarItem","onCollapse","isCollapsed","setCollapsed","itemSelected","setItemSelected","_sidebarChilds","_id","currentTarget","preventDefault","length","_sidebarLogo","find","a","type","renderSidebarLogo","forEach","child","push"],"mappings":"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"}