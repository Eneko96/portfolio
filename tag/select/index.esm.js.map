{"version":3,"file":"index.esm.js","sources":["../../src/components/dropdown/dropdownButton.tsx","../../src/components/dropdown/dropdownMenu.tsx","../../src/components/dropdown/dropdown.tsx","../../src/components/select/selectOption.tsx","../../src/components/select/select.tsx"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {useDropdown} from './dropdown';\nexport interface DropdownButtonProps {\n  className?: string;\n  disabled?: boolean;\n  children: React.ReactNode;\n\n  [others: string]: any;\n}\n\nconst DropdownButton: React.FC<DropdownButtonProps> = ({children, className, disabled, ...rest}) => {\n  const {onToggleMenu, setDropdownButtonDimensions, showMenu} = useDropdown();\n  const dropdownButtonRef = React.useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (dropdownButtonRef && dropdownButtonRef.current) {\n      const positionButton = dropdownButtonRef.current.getBoundingClientRect();\n      if (positionButton) setDropdownButtonDimensions({width: positionButton.width, height: positionButton.height});\n    }\n  }, [showMenu]);\n  return (\n    <div\n      className={`dropdown-button${disabled ? '_disabled' : ''} ${className || ''}`}\n      onClick={onToggleMenu}\n      ref={dropdownButtonRef}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default React.memo(DropdownButton);\n","import React, {useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useDropdown} from './dropdown';\n\nexport interface DropdownMenuProps {\n  className?: string;\n  [others: string]: any;\n}\n\nconst DropdownMenu: React.FC<DropdownMenuProps> = ({className, children, ...rest}) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const {showMenu, setDropdownMenuDimensions, position, dropdownRef, handleClickMenu} = useDropdown();\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      const positionMenu = ref.current.getBoundingClientRect();\n      if (positionMenu)\n        setDropdownMenuDimensions({\n          width: positionMenu.width,\n          height: positionMenu.height,\n        });\n    }\n  }, [showMenu]);\n\n  const content = (\n    <div\n      ref={ref}\n      className={`dropdown-menu ${showMenu ? '' : 'hidden'} ${className || ''}`}\n      style={position}\n      onClick={handleClickMenu}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n  if (dropdownRef && dropdownRef.current) {\n    const root = document.getElementById('root');\n    return ReactDOM.createPortal(content, dropdownRef.current || root || document.body);\n  }\n  return null;\n};\n\nexport default DropdownMenu;\n","import React, {useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport {default as DropdownButton} from './dropdownButton';\nexport {default as DropdownMenu} from './dropdownMenu';\nconst DropdownContext = React.createContext({});\ntype DropdownPosition = 'top' | 'bottom' | 'right' | 'left';\ninterface DropdownProps {\n  className?: string;\n  onChangeToggleMenu?: (state: boolean) => void;\n  itemsDivider?: boolean;\n  forceRefresh?: number;\n  defaultShow?: boolean;\n  keepShown?: boolean;\n  placement?: DropdownPosition;\n  [others: string]: any;\n}\n\ninterface IDropdownContext {\n  showMenu: boolean;\n  setDropdownMenuDimensions: (dimensions: {width: number; height: number}) => void;\n  setDropdownButtonDimensions: (dimensions: {width: number; height: number}) => void;\n  handleClickMenu: (e: React.MouseEvent<HTMLDivElement>) => void;\n  position: {left: string; top: string};\n  itemsDivider: boolean;\n  dropdownRef: React.RefObject<HTMLDivElement>;\n  onToggleMenu: () => void;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({\n  children,\n  className,\n  onChangeToggleMenu,\n  itemsDivider,\n  forceRefresh,\n  defaultShow,\n  keepShown = false,\n  placement = 'bottom',\n  ...rest\n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [refresh, setRefresh] = useState(forceRefresh ? forceRefresh : 0);\n  const [dropdownMenuDim, setDropdownMenuDim] = useState({width: 0, height: 0});\n  const [dropdownButtonDim, setDropdownButtonDim] = useState({width: 0, height: 0});\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (defaultShow !== undefined && defaultShow !== showMenu) {\n      setShowMenu(defaultShow as boolean);\n    }\n  }, [defaultShow]);\n\n  useEffect(() => {\n    if (forceRefresh && refresh !== forceRefresh) setRefresh(forceRefresh);\n  }, [forceRefresh, refresh]);\n\n  const onToggleMenu = () => {\n    setShowMenu((prev) => {\n      if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(!prev);\n      return !prev;\n    });\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (event && event.target) {\n      if (\n        dropdownRef &&\n        dropdownRef.current &&\n        dropdownRef.current.getAttribute('data-show') === 'true' &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setShowMenu(false);\n        if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('scroll', () => setRefresh((prev) => prev++));\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n      document.removeEventListener('scroll', () => setRefresh((prev) => prev++));\n    };\n  }, []);\n\n  const topStr = (top: number, menuHeight: number) => `calc(${top}px - ${menuHeight}px - var(--unit))`;\n  const bottomStr = (top: number, buttonHeight: number) => `calc(${top}px + ${buttonHeight}px + var(--unit))`;\n  const rightStr = (left: number, buttonWidth: number) => `calc(${left}px + ${buttonWidth}px + var(--unit))`;\n  const leftStr = (left: number, menuWidth: number) => `calc(${left}px - ${menuWidth}px - var(--unit))`;\n  const leftAlignment = (left: number) => `${left}px`;\n  const rightAlignment = (left: number, menuWidth: number, buttonWidth: number) =>\n    `calc(${left}px + ${buttonWidth}px - ${menuWidth}px)`;\n  const topAlignment = (top: number) => `${top}px`;\n  const bottomAlignment = (top: number, menuHeight: number, buttonHeight: number) =>\n    `calc(${top}px + ${buttonHeight}px - ${menuHeight}px)`;\n\n  const position = useMemo(() => {\n    let left,\n      top = '',\n      dropdownMenuWidth = 0;\n\n    if (dropdownRef && dropdownRef.current) {\n      const position = dropdownRef.current.getBoundingClientRect();\n      dropdownMenuWidth = dropdownMenuDim.width < dropdownButtonDim.width ? dropdownButtonDim.width : dropdownMenuDim.width;\n      const {clientHeight, clientWidth} = document.body;\n      switch (placement) {\n        case 'top':\n          if (position.top - dropdownMenuDim.height - 8 < 0) {\n            top = bottomStr(position.top, dropdownButtonDim.height);\n          } else {\n            top = topStr(position.top, dropdownMenuDim.height);\n          }\n          if (position.left + dropdownMenuWidth > clientWidth) {\n            left = rightAlignment(position.left, dropdownMenuWidth, dropdownButtonDim.width);\n          } else {\n            left = leftAlignment(position.left);\n          }\n          break;\n        case 'right':\n          if (position.left + dropdownMenuWidth + 8 > clientWidth) {\n            left = leftStr(position.left, dropdownMenuWidth);\n          } else {\n            left = rightStr(position.left, dropdownButtonDim.width);\n          }\n          if (position.top + dropdownMenuDim.height > clientHeight) {\n            top = bottomAlignment(position.top, dropdownMenuDim.height, dropdownButtonDim.height);\n          } else {\n            top = topAlignment(position.top);\n          }\n          break;\n        case 'bottom':\n          if (position.top + dropdownMenuDim.height + 8 > clientHeight) {\n            top = topStr(position.top, dropdownMenuDim.height);\n          } else {\n            top = bottomStr(position.top, dropdownButtonDim.height);\n          }\n          if (position.left + dropdownMenuWidth > clientWidth) {\n            left = rightAlignment(position.left, dropdownMenuWidth, dropdownButtonDim.width);\n          } else {\n            left = leftAlignment(position.left);\n          }\n          break;\n        case 'left':\n          if (position.left - dropdownMenuWidth - 8 < 0) {\n            left = rightStr(position.left, dropdownButtonDim.width);\n          } else {\n            left = leftStr(position.left, dropdownMenuWidth);\n          }\n          if (position.top + dropdownMenuDim.height > clientHeight) {\n            top = bottomAlignment(position.top, dropdownMenuDim.height, dropdownButtonDim.height);\n          } else {\n            top = topAlignment(position.top);\n          }\n          break;\n      }\n    }\n    return {left, top, width: `${dropdownMenuWidth}px`};\n  }, [dropdownMenuDim, dropdownButtonDim]);\n\n  const handleClickMenu = () => {\n    if (!keepShown) {\n      setShowMenu(false);\n      if (typeof onChangeToggleMenu === 'function') onChangeToggleMenu(false);\n    }\n  };\n\n  return (\n    <DropdownContext.Provider\n      value={{\n        showMenu,\n        setDropdownMenuDimensions: setDropdownMenuDim,\n        setDropdownButtonDimensions: setDropdownButtonDim,\n        handleClickMenu,\n        itemsDivider,\n        dropdownRef,\n        onChangeToggleMenu,\n        onToggleMenu,\n        position,\n      }}\n    >\n      <div ref={dropdownRef} className={`dropdown ${className || ''}`} data-show={showMenu} {...rest}>\n        {children}\n      </div>\n    </DropdownContext.Provider>\n  );\n};\n\nexport default Dropdown;\n/**\n *\n * @internal\n */\nexport const useDropdown = () => useContext(DropdownContext) as IDropdownContext;\n","import React from 'react';\nimport {useSelect} from './select';\nexport interface ISelectOptionProps {\n  id?: string;\n  value: any;\n  label: string;\n  [others: string]: any;\n}\n\nconst SelectOption: React.FC<ISelectOptionProps> = (props) => {\n  const {id, value, label, ...rest} = props;\n  const {selectedValue, filterValue, multiple, onSelectItem, onRemoveItem} = useSelect();\n\n  const isSelected = () => {\n    if (selectedValue) {\n      if (!multiple) {\n        return selectedValue === value;\n      }\n      return typeof selectedValue === 'object' && typeof selectedValue.find((_val: any) => _val === value) !== 'undefined';\n    }\n  };\n\n  const isFiltered = () => {\n    if (filterValue) {\n      const matchesLabel = label.toUpperCase().includes(filterValue.toUpperCase());\n      if (matchesLabel) return true;\n      return false;\n    }\n    return true;\n  };\n  const onChangeItem = () => {\n    if (isSelected()) {\n      onRemoveItem(value);\n    } else {\n      onSelectItem(value);\n    }\n  };\n\n  const onClickItem = () => {\n    if (isSelected()) {\n      onRemoveItem(value);\n    } else {\n      onSelectItem(value);\n    }\n  };\n\n  return isFiltered() ? (\n    multiple ? (\n      <li className=\"dropdown-item checkbox-container dropdown-item\">\n        <input id={id || value} type=\"checkbox\" checked={isSelected()} onChange={onChangeItem} {...rest} />\n        <label htmlFor={id || value}>{label}</label>\n      </li>\n    ) : (\n      <li id={id} className={`dropdown-item ${isSelected() ? 'selected' : ''}`} onClick={onClickItem} {...rest}>\n        {label}\n      </li>\n    )\n  ) : null;\n};\n\nexport default SelectOption;\n","import React, {useState, useEffect, useRef, useContext} from 'react';\nimport Dropdown, {DropdownButton, DropdownMenu} from '../dropdown/dropdown';\nexport {default as Option} from './selectOption';\nconst SelectContext = React.createContext({});\nexport interface ISelectProps {\n  /**\n   * Define if select is large\n   */\n  large?: boolean;\n  /**\n   * Define if is select filter\n   */\n  filter?: boolean;\n  /**\n   * Define if is select multiple\n   */\n  multiple?: boolean;\n\n  /**\n   * Define if select is disabled\n   */\n  disabled?: boolean;\n  /**\n   * Define if select is required\n   */\n  required?: boolean;\n  /**\n   * Define if select have an error\n   */\n  error?: boolean;\n\n  /**\n   * Set label for select\n   */\n  label?: string;\n  /**\n   * Set helper text for select\n   */\n  helperText?: string;\n  /**\n   * Set the icon in helper text. It's a name of material icon, example: \"info\"\n   */\n  helperIcon?: string;\n  /**\n   * Set placeholder for select\n   */\n  placeholder: string;\n  /**\n   * Set different classes for select component\n   */\n  className?: string;\n\n  /**\n   * Set the name of value in a form\n   */\n  name: string;\n  /**\n   * Set the value of select\n   */\n  value?: any;\n  /**\n   * Return the value of select\n   */\n  onChange?: (value: any) => void;\n  /**\n   * Sets the value of the filter,\n   * in case you manage the options representation outside the component,\n   * you will need to manage this state outside this component as well,\n   * in case you are using the filter option\n   */\n  filterValue?: string;\n  /**\n   * Return the value of filter value (remember the previous explanation)\n   */\n  onChangeFilter?: (filterValue: string) => void;\n\n  [others: string]: any;\n}\n\ninterface ISelectContext {\n  multiple: boolean;\n  selectedValue: any;\n  filterValue: string;\n  onSelectItem: (selectValue: string | number) => void;\n  onRemoveItem: (removeValue: string | number) => void;\n}\n\nconst Select: React.FC<ISelectProps> = ({\n  large,\n  required,\n  filter,\n  multiple,\n  disabled,\n  error,\n\n  label,\n  placeholder,\n  helperText,\n  helperIcon,\n\n  name,\n  className,\n  value,\n\n  onChange,\n\n  filterValue,\n  onChangeFilter,\n  children,\n  ...rest\n}) => {\n  const inputRef: any = useRef<HTMLInputElement>();\n  const getValueFromProps = () => {\n    if (Array.isArray(value) && multiple) {\n      return value as any;\n    } else if (typeof value === 'string' || typeof value === 'number') {\n      if (multiple) return [value];\n      return value;\n    }\n    return multiple ? [] : '';\n  };\n\n  const [valueState, setValueState] = React.useState(getValueFromProps());\n  const [filterVal, setFilterVal] = useState<string | undefined>(filterValue ? filterValue : undefined);\n  const [showMenu, setShowMenu] = useState(false);\n\n  useEffect(() => {\n    if (getValueFromProps() !== valueState) setValueState(getValueFromProps());\n  }, [value]);\n\n  useEffect(() => {\n    if (filter && typeof onChangeFilter === 'function') {\n      if (filterValue !== filterVal) {\n        setFilterVal(filterValue);\n      }\n    }\n  }, [filterValue]);\n\n  const onSelectItem = (selectValue: string) => {\n    if (!multiple) {\n      setValueState(selectValue);\n      if (onChange) onChange(selectValue);\n    } else {\n      let values = valueState;\n      if (!values.some((existingValue: string) => existingValue === selectValue)) {\n        values = [...values, selectValue];\n      }\n      setValueState(values);\n\n      if (onChange) onChange(values);\n    }\n  };\n\n  const onRemoveItem = (deleteValue: string) => {\n    let newValues: any;\n    if (!multiple) {\n      newValues = '';\n      if (onChange) onChange('');\n    } else {\n      const currentStateValue = valueState;\n      if (typeof currentStateValue === 'object') {\n        newValues =\n          currentStateValue &&\n          currentStateValue.length &&\n          currentStateValue.filter((existingValue: string) => existingValue !== deleteValue);\n      }\n    }\n    setValueState(newValues);\n    if (onChange) onChange(newValues);\n  };\n\n  const onRemoveOptions = () => {\n    if (multiple) {\n      setValueState([]);\n      if (onChange) onChange([]);\n    } else {\n      setValueState('');\n      if (onChange) onChange([]);\n    }\n  };\n\n  const filterItems = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof onChangeFilter === 'function') {\n      onChangeFilter(event.target.value);\n    } else {\n      setFilterVal(event.target.value);\n    }\n  };\n\n  const onRemoveFilterValue = () => {\n    if (typeof onChangeFilter === 'function') {\n      onChangeFilter('');\n    } else {\n      if (inputRef && inputRef.current) inputRef.current.value = '';\n      setFilterVal('');\n    }\n  };\n\n  const renderSelectContainer = () => {\n    if (filter) {\n      return (\n        <div className=\"input-container\">\n          <input\n            data-testid={rest && rest['data-testid'] ? `${rest['data-testid']}-input` : undefined}\n            className={`input ${large ? 'large' : ''}`}\n            placeholder={valueState && valueState.length && multiple ? `${valueState.length} Options selected` : placeholder}\n            ref={inputRef}\n            type=\"text\"\n            defaultValue={filterVal}\n            onChange={filterItems}\n            disabled={disabled}\n          />\n          {filterVal ? (\n            <span\n              data-testid={rest && rest['data-testid'] ? `${rest['data-testid']}-remove-filter-btn` : undefined}\n              className=\"material-icons input-icon-box\"\n              onClick={onRemoveFilterValue}\n            >\n              close\n            </span>\n          ) : (\n            <span className=\"material-icons input-icon-box\">search</span>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"input-container\">\n        <div className={large ? 'input_large' : 'input'}>{getTextContent()}</div>\n        {showMenu ? (\n          <span className=\"material-icons input-icon-box\">expand_less</span>\n        ) : (\n          <span className=\"material-icons input-icon-box\">expand_more</span>\n        )}\n      </div>\n    );\n  };\n\n  const getTextContent = () => {\n    if (multiple && typeof valueState === 'object' && valueState.length) {\n      return <span className=\"placeholder\">{`${valueState.length} Options selected`}</span>;\n    } else if (valueState && children) {\n      const itemSelected = (children as any[]).find((item: any) => item.props?.value === valueState);\n      if (itemSelected) return itemSelected.props?.label;\n    }\n    return <span className=\"placeholder\">{placeholder}</span>;\n  };\n\n  const renderBottomContainer = () => {\n    let content: any = null;\n    if ((filter || multiple) && valueState && valueState.length) {\n      if (filter && !multiple)\n        content = (\n          <button\n            type=\"button\"\n            data-testid={rest && rest['data-testid'] ? `${rest['data-testid']}-remove-btn` : undefined}\n            className={`chip_active${disabled ? '_disabled' : ''}`}\n            onClick={onRemoveOptions}\n          >\n            {getTextContent()}\n            <span className=\"material-icons right\">close</span>\n          </button>\n        );\n      if (multiple)\n        content = (\n          <button\n            type=\"button\"\n            data-testid={rest && rest['data-testid'] ? `${rest['data-testid']}-remove-btn` : undefined}\n            className={`chip_active${disabled ? '_disabled' : ''}`}\n            onClick={onRemoveOptions}\n          >\n            {`${valueState.length} Options selected`}\n            <span className=\"material-icons right\">close</span>\n          </button>\n        );\n      return (\n        <div className=\"select-bottom-container\">\n          {content}\n          {helperText && (\n            <p className=\"input-helper-text\">\n              {helperIcon && <span className=\"material-icons\">{helperIcon}</span>}\n              {helperText}\n            </p>\n          )}\n        </div>\n      );\n    }\n    return (\n      helperText && (\n        <p className=\"input-helper-text\">\n          {helperIcon && <span className=\"material-icons\">{helperIcon}</span>}\n          {helperText}\n        </p>\n      )\n    );\n  };\n\n  return (\n    <SelectContext.Provider\n      value={{multiple, selectedValue: valueState, filterValue: filterVal, onSelectItem, onRemoveItem}}\n    >\n      <div className={`input-wrapper${disabled ? '_disabled' : ''} ${error ? 'error' : ''}  ${className || ''}`}>\n        {label && (\n          <label className=\"caption\">\n            {required && <small>*</small>}\n            {label}\n          </label>\n        )}\n\n        <Dropdown onChangeToggleMenu={(state: boolean) => setShowMenu(state)} keepShown={multiple}>\n          <DropdownButton data-testid={rest && rest['data-testid'] ? rest['data-testid'] : undefined} disabled={disabled}>\n            {renderSelectContainer()}\n          </DropdownButton>\n          <DropdownMenu>\n            <ul>{children}</ul>\n          </DropdownMenu>\n        </Dropdown>\n        <input type=\"hidden\" readOnly name={name} disabled={disabled} value={valueState} />\n        {renderBottomContainer()}\n      </div>\n    </SelectContext.Provider>\n  );\n};\n\nexport default Select;\n/**\n *\n * @internal\n */\nexport const useSelect = () => useContext(SelectContext) as ISelectContext;\n"],"names":["DropdownButton$1","React","memo","_a","children","className","disabled","rest","__rest","_b","useDropdown","onToggleMenu","setDropdownButtonDimensions","showMenu","dropdownButtonRef","useRef","useEffect","current","positionButton","getBoundingClientRect","width","height","_jsx","__assign","concat","onClick","ref","DropdownMenu","setDropdownMenuDimensions","position","dropdownRef","handleClickMenu","positionMenu","content","style","root","document","getElementById","ReactDOM","createPortal","body","DropdownContext","createContext","Dropdown","onChangeToggleMenu","itemsDivider","forceRefresh","defaultShow","keepShown","_c","placement","_d","__read","useState","setShowMenu","_e","refresh","setRefresh","_f","dropdownMenuDim","setDropdownMenuDim","_g","dropdownButtonDim","setDropdownButtonDim","undefined","handleClickOutside","event","target","getAttribute","contains","addEventListener","prev","removeEventListener","topStr","top","menuHeight","bottomStr","buttonHeight","rightStr","left","buttonWidth","leftStr","menuWidth","leftAlignment","rightAlignment","topAlignment","bottomAlignment","useMemo","dropdownMenuWidth","position_1","clientHeight","clientWidth","Provider","value","useContext","SelectOption","props","id","label","useSelect","selectedValue","filterValue","multiple","onSelectItem","onRemoveItem","isSelected","find","_val","toUpperCase","includes","_jsxs","type","checked","onChange","htmlFor","SelectContext","Select","large","required","filter","error","placeholder","helperText","helperIcon","name","onChangeFilter","inputRef","getValueFromProps","Array","isArray","valueState","setValueState","filterVal","setFilterVal","onRemoveOptions","filterItems","onRemoveFilterValue","getTextContent","length","itemSelected","item","selectValue","values","some","existingValue","__spreadArray","deleteValue","newValues","currentStateValue","state","DropdownButton","defaultValue","readOnly"],"mappings":"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"}