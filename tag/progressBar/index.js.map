{"version":3,"file":"index.js","sources":["../../src/components/progressBar/progressBarCircular.tsx","../../src/components/progressBar/progressBarSmall.tsx","../../src/components/progressBar/progressBar.tsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\n\ninterface IProgressBarCircularProps {\n  step: number;\n  steps: number;\n  title?: string;\n  helper?: string;\n  className?: string;\n  [others: string]: any;\n}\n\nconst ProgressBarCircular: React.FC<IProgressBarCircularProps> = (props) => {\n  const {step, steps, title, helper, className, ...rest} = props;\n  const ref = useRef<SVGPathElement>(null);\n  const divRef = useRef<HTMLDivElement>(null);\n  const calcPercentage = (step / steps) * 100 || 0;\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      ref.current.style.animationDelay = '0';\n      ref.current.style.transition = 'stroke-dashoffset 0.2s linear';\n      ref.current.style.strokeDashoffset = `${(222 / steps) * (steps - step) + 78}`;\n    }\n  }, [step, steps]);\n\n  return (\n    <div\n      className={`progress-bar_round ${className || ''}`}\n      data-testid={rest && rest['data-testid'] ? rest['data-testid'] : undefined}\n    >\n      <div\n        ref={divRef}\n        className=\"svg-container_circular_big\"\n        data-testid={rest && rest['data-testid'] ? `${rest['data-testid']}-svg-container` : undefined}\n        data-percentage={`${calcPercentage.toFixed()}%`}\n      >\n        <svg\n          className=\"svg-content\"\n          width=\"80\"\n          height=\"80\"\n          viewBox=\"0 0 80 80\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            className=\"circle-svg\"\n            ref={ref}\n            d=\"M40 76C20.1178 76 4 59.8822 4 40C4 20.1178 20.1178 4 40\n            4C59.8823 4 76 20.1178 76 40C76 59.8823 59.8823 76 40 76Z\"\n            strokeWidth=\"8\"\n          />\n        </svg>\n      </div>\n      <div className=\"progress-bar-text-wrapper\">\n        {title && <p className=\"progress-bar-title\">{title}</p>}\n        {helper && <p className=\"progress-bar-helper\">{helper}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBarCircular;\n","import React, {useRef, useEffect} from 'react';\n\ninterface IProgressBarSmallProps {\n  step: number;\n  steps: number;\n  title?: string;\n  helper?: string;\n  className?: string;\n  [others: string]: any;\n}\nconst ProgressBarSmall: React.FC<IProgressBarSmallProps> = (props) => {\n  const {step, steps, helper, title, className, ...rest} = props;\n  const ref = useRef<SVGPathElement>(null);\n  const divRef = useRef<HTMLDivElement>(null);\n  const calcPercentage = (step / steps) * 100 || 0;\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      ref.current.style.animationDelay = '0';\n      ref.current.style.transition = 'stroke-dashoffset 0.2s linear';\n      ref.current.style.strokeDashoffset = `${(137 / steps) * (steps - step) + 163}`;\n    }\n  }, [step, steps]);\n\n  return (\n    <div\n      className={`progress-bar_round ${className || ''}`}\n      data-testid={rest && rest['data-testid'] ? rest['data-testid'] : undefined}\n    >\n      <div\n        ref={divRef}\n        className=\"svg-container_circular_medium\"\n        data-testid={rest && rest['data-testid'] ? `${rest['data-testid']}-svg-container` : undefined}\n        data-percentage={`${calcPercentage.toFixed()}%`}\n      >\n        <svg\n          width=\"48\"\n          className=\"svg-content\"\n          height=\"48\"\n          viewBox=\"0 0 48 48\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            ref={ref}\n            className=\"circle-svg\"\n            d=\"M24 46C11.8497 46 2 36.1503 2 24C2 11.8497 11.8497 2 24\n        2C36.1503 2 46 11.8497 46 24C46 36.1503 36.1503 46 24 46Z\"\n            strokeWidth=\"4\"\n          />\n        </svg>\n      </div>\n      <div className=\"progress-bar-text-wrapper\">\n        {title && <p className=\"progress-bar-title\">{title}</p>}\n        {helper && <p className=\"progress-bar-helper\">{helper}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBarSmall;\n","import React from 'react';\nimport ProgressBarCircular from './progressBarCircular';\nimport ProgressBarSmall from './progressBarSmall';\n\nexport interface IProgressBarProps {\n  /**\n   * Step where the user currently is\n   */\n  step: number;\n  /**\n   * Number of steps that are on the progress\n   */\n  steps: number;\n  /**\n   * Title of the Progress Bar\n   */\n  title?: string;\n  /**\n   * Helper for hinting or give more information\n   */\n  helper?: string;\n  /**\n   * Change from bar to circle\n   */\n  circular?: boolean;\n  /**\n   * Change from bar to small circle\n   */\n  small?: boolean;\n  /**\n   * On Progress bar: to show if wanted to see the steps\n   */\n  showSteps?: boolean;\n  showPercentage?: boolean;\n  className?: string;\n  [others: string]: any;\n}\n\nconst ProgressBar: React.FC<IProgressBarProps> = (props) => {\n  const {step, title, helper, steps, circular, small, showSteps, showPercentage, className, ...rest} = props;\n  const calcPercentage = (step / steps) * 100 || 0;\n\n  if (small) {\n    return (\n      <ProgressBarSmall\n        className={className}\n        step={step}\n        steps={steps}\n        title={title}\n        helper={helper}\n        data-testid={rest && rest['data-testid'] ? rest['data-testid'] : undefined}\n      />\n    );\n  }\n\n  if (circular) {\n    return (\n      <ProgressBarCircular\n        className={className}\n        step={step}\n        steps={steps}\n        title={title}\n        helper={helper}\n        data-testid={rest && rest['data-testid'] ? rest['data-testid'] : undefined}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={`progress-bar ${className || ''}`}\n      data-testid={rest && rest['data-testid'] ? rest['data-testid'] : null}\n    >\n      {title && <div className=\"progress-bar-title\">{title}</div>}\n      <div className=\"progress-bar-progress\">\n        <div className=\"progress-bar-progress-bar\" style={{width: `${calcPercentage}%`}} />\n      </div>\n      <div className=\"progress-bar-footer\">\n        {showSteps && (\n          <div className=\"progress-bar-steps\">\n            {step}/{steps}\n          </div>\n        )}\n        {showPercentage && <div className=\"progress-bar-percentage\">{calcPercentage.toFixed()}%</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n"],"names":["ProgressBarCircular","props","step","steps","title","helper","className","rest","__rest","ref","useRef","divRef","calcPercentage","useEffect","current","style","animationDelay","transition","strokeDashoffset","concat","_jsxs","jsxs","__assign","undefined","children","_jsx","toFixed","jsx","width","height","viewBox","fill","xmlns","d","strokeWidth","ProgressBarSmall","circular","small","showSteps","showPercentage"],"mappings":"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"}